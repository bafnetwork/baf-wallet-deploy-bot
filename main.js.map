{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./libs/interfaces/src/index.ts","webpack:///./libs/errors/src/index.ts","webpack:///./libs/utils/src/index.ts","webpack:///external \"near-api-js\"","webpack:///external \"buffer\"","webpack:///external \"tweetnacl\"","webpack:///./libs/crypto/src/lib/hash.ts","webpack:///./libs/near/src/lib/convert.ts","webpack:///external \"typedi\"","webpack:///external \"discord.js\"","webpack:///./libs/utils/src/lib/bytes.ts","webpack:///external \"tslib\"","webpack:///./libs/crypto/src/lib/keys.ts","webpack:///./libs/crypto/src/lib/sign.ts","webpack:///./libs/near/src/lib/utils.ts","webpack:///./apps/bot/src/environments/environment.test.ts","webpack:///./apps/bot/src/Command.ts","webpack:///./libs/near/src/index.ts","webpack:///external \"elliptic\"","webpack:///./libs/baf-contract/src/index.ts","webpack:///./apps/bot/src/config/config.ts","webpack:///./apps/bot/src/managers/ActionManager.ts","webpack:///external \"bs58\"","webpack:///external \"near-api-js/lib/account_creator\"","webpack:///external \"near-api-js/lib/key_stores\"","webpack:///external \"reflect-metadata\"","webpack:///./libs/multi-chain/src/lib/index.ts","webpack:///./libs/multi-chain/src/lib/switches.ts","webpack:///./libs/errors/src/lib/errors.ts","webpack:///./libs/interfaces/src/lib/configs.ts","webpack:///./libs/interfaces/src/lib/chains.ts","webpack:///./libs/interfaces/src/lib/keysource.ts","webpack:///./libs/interfaces/src/lib/crypto.ts","webpack:///./libs/interfaces/src/lib/generic-tx.ts","webpack:///./libs/near/src/lib/near.ts","webpack:///./libs/crypto/src/lib/crypto.ts","webpack:///./libs/crypto/src/lib/index.ts","webpack:///./libs/utils/src/lib/utils.ts","webpack:///./libs/utils/src/lib/conversions.ts","webpack:///./libs/utils/src/lib/types.ts","webpack:///./libs/utils/src/lib/user-verifier.ts","webpack:///./libs/utils/src/lib/serialize.ts","webpack:///./libs/baf-contract/src/lib/baf-contract.ts","webpack:///./libs/baf-contract/src/lib/constants.ts","webpack:///./libs/multi-chain/src/lib/utils.ts","webpack:///./libs/redirect-generator/src/lib/redirect-generator.ts","webpack:///external \"dotenv\"","webpack:///./apps/bot/src/Client.ts","webpack:///./apps/bot/src/commands/index.ts","webpack:///./apps/bot/src/commands/Ping.ts","webpack:///./apps/bot/src/commands/Send.ts","webpack:///./libs/multi-chain/src/index.ts","webpack:///./libs/near/src/lib/tx.ts","webpack:///./libs/crypto/src/index.ts","webpack:///external \"js-sha3\"","webpack:///external \"js-sha256\"","webpack:///external \"bn.js\"","webpack:///./libs/near/src/lib/rpc.ts","webpack:///./libs/near/src/lib/accounts.ts","webpack:///external \"near-api-js/lib/utils\"","webpack:///./libs/redirect-generator/src/index.ts","webpack:///./apps/bot/src/events/index.ts","webpack:///./apps/bot/src/events/Message.ts","webpack:///./apps/bot/src/events/Ready.ts","webpack:///./apps/bot/src/main.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACF;AACD;AACG;AACH;AACE;AACE;;;;;;;;ACNjC;AAAA;AAAA;AAA6B;;;;;;;;ACA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;;;;;;;ACA5B,wC;;;;;;ACAA,mC;;;;;;ACAA,sC;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACgB;AAEzC,SAAS,SAAS,CAAC,GAAW;IACnC,OAAO,MAAM,CAAC,IAAI,CAAC,iDAAc,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AACjD,CAAC;AAEM,SAAS,MAAM,CAAC,GAAW;IAChC,OAAO,MAAM,CAAC,IAAI,CAAC,wDAAS,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AAC5C,CAAC;AAED,mCAAmC;;;;;;;;ACXnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKgC;AACyC;AACK;AAC9C;AACc;AAEvC,MAAM,aAAa,mCAKrB,yEAAe,KAElB,WAAW,CACT,EAAuB,EACvB,WAAkB;QAElB,IAAI,WAAW,CAAC,QAAQ,EAAE,KAAK,SAAS,EAAE;YACxC,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;SAC/C;QACD,MAAM,IAAI,GAAG,6CAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAClC,OAAO;YACL,KAAK,EAAE,WAAW;YAClB,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,6EAAW,CAAC,IAAI,EAAE,GAAG,CAAC;SAClD,CAAC;IACJ,CAAC,EAED,aAAa,EAAE,CAAQ,SAA2B,EAAuB,EAAE,CACzE,iDAAS,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,uEAAQ,CAAC,IAAI,CAAC,CAAC,EAEjE,gBAAgB,CACd,OAAoB,EACpB,WAAkB;QAElB,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE;YAC7C,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;SAC/C;QAED,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,6EAAW,CAAC,KAAK,EAAE,uEAAQ,CAAC,IAAI,CAAC,CAAC;QACjD,MAAM,MAAM,GAAG,6CAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC;QAExD,OAAO;YACL,KAAK,EAAE,WAAW;YAClB,EAAE,EAAE;gBACF,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,6EAAW,CAAC,MAAM,EAAE,GAAG,CAAC;aACpD;YACD,EAAE,EAAE;gBACF,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,6EAAW,CAAC,MAAM,EAAE,GAAG,CAAC;aACpD;SACF,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAQ,cAA8B;QACtD,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/C,MAAM,KAAK,GAAG,cAAc,CAAC,EAAE,CAAC,MAAM,CAAC,uEAAQ,CAAC,IAAI,CAAC,CAAC;QACtD,OAAO,mDAAW,CAAC,UAAU,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC,GACF,CAAC;;;;;;;ACrEF,mC;;;;;;ACAA,uC;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AAC1B;AACjB;AAEtB,SAAS,WAAW,CAAC,GAAW,EAAE,GAAG,GAAG,uEAAQ,CAAC,GAAG;IACzD,QAAQ,GAAG,EAAE;QACX,KAAK,uEAAQ,CAAC,GAAG;YACf,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,KAAK,uEAAQ,CAAC,IAAI;YAChB,OAAO,2CAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;KAC3C;AACH,CAAC;AAEM,SAAS,WAAW,CAAC,GAAW,EAAE,GAAa;IACpD,QAAQ,GAAG,EAAE;QACX,KAAK,uEAAQ,CAAC,GAAG;YACf,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACjC,KAAK,uEAAQ,CAAC,IAAI;YAChB,OAAO,2CAAW,CAAC,GAAG,CAAC,CAAC;QAC1B,KAAK,uEAAQ,CAAC,IAAI;YAChB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAClC;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;KAC3C;AACH,CAAC;AAEM,SAAS,SAAS,CAAQ,GAAqB;IACpD,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC;AAEM,SAAS,UAAU,CACxB,GAAqB,EACrB,SAAS,GAAG,uEAAQ,CAAC,GAAG;IAExB,OAAO,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC1C,CAAC;AAEM,SAAS,YAAY,CAC1B,GAAW,EACX,KAAY,EACZ,SAAS,GAAG,uEAAQ,CAAC,GAAG;IAExB,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACzC,OAAO;QACL,IAAI;QACJ,KAAK;QACL,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC;KAClD,CAAC;AACJ,CAAC;AAEM,SAAS,YAAY,CAC1B,GAAW,EACX,KAAY,EACZ,SAAS,GAAG,uEAAQ,CAAC,GAAG;IAExB,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACzC,OAAO;QACL,IAAI;QACJ,KAAK;QACL,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC;KAClD,CAAC;AACJ,CAAC;;;;;;;AC/DD,kC;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AASd;AACoB;AAChB;AACF;AAElC,MAAM,iBAAiB,GAAG,IAAI,2CAAE,CAAC,WAAW,CAAC,CAAC;AAEvC,SAAS,YAAY,CAAC,CAAS,EAAE,CAAS;IAC/C,MAAM,GAAG,GAAG,iBAAiB,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7D,OAAO,yEAAe,CAAC,WAAW,CAChC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EACnC,8EAAe,CAChB,CAAC;AACJ,CAAC;AAEM,SAAS,aAAa,CAAQ,EAAoB;IACvD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACxB,OAAO;QACL,KAAK,EAAE,EAAE,CAAC,KAAK;QACf,EAAE;QACF,EAAE;KACH,CAAC;AACJ,CAAC;AAEM,SAAS,QAAQ,CAAQ,EAAoB;IAClD,QAAQ,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE;QAC3B,KAAK,4EAAa,CAAC,CAAC;YAClB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,iBAAiB,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,EACjE,KAAK,CACN,CAAC;YAEF,OAAO,yEAAe,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;SACpD;QACD,KAAK,0EAAW,CAAC,CAAC;YAChB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,8CAAS,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CACnE,CAAC;YAEF,OAAO,yEAAe,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;SACpD;QACD;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC3D;AACH,CAAC;AAEM,SAAS,UAAU,CACxB,IAAgB,EAChB,WAAkB;IAElB,QAAQ,WAAW,CAAC,QAAQ,EAAE,EAAE;QAC9B,KAAK,4EAAa,CAAC,CAAC;YAClB,MAAM,OAAO,GAAG,8CAAS,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,UAAU,GAAG,iBAAiB;iBACjC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC;iBACvB,UAAU,CAAC,KAAK,CAAC,CAAC;YAErB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAC5C,OAAO,yEAAe,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SACvD;QACD,KAAK,0EAAW,CAAC,CAAC;YAChB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,8CAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CACxE,CAAC;YAEF,OAAO,yEAAe,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SACvD;QACD;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC9D;AACH,CAAC;AAEM,SAAS,SAAS,CAAQ,WAAkB;IACjD,QAAQ,WAAW,CAAC,QAAQ,EAAE,EAAE;QAC9B,KAAK,0EAAW,CAAC,CAAC;YAChB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,8CAAS,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;YACxD,OAAO,yEAAe,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SACvD;QACD,KAAK,4EAAa,CAAC,CAAC;YAClB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,iBAAiB,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAChD,KAAK,CACN,CAAC;YACF,OAAO,yEAAe,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SACvD;QACD;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC9D;AACH,CAAC;;;;;;;;ACjGD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASgC;AACW;AACP;AACF;AACc;AACoB;AACtB;AAE9C,MAAM,iBAAiB,GAAG,IAAI,2CAAE,CAAC,WAAW,CAAC,CAAC;AAEvC,SAAS,eAAe,CAC7B,EAAoB,EACpB,GAAoB,EACpB,SAAiB,EACjB,SAAkC,uDAAS;IAE3C,MAAM,SAAS,GACb,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,6EAAW,CAAC,GAAG,EAAE,uEAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAClE,QAAQ,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE;QAC3B,KAAK,4EAAa,CAAC,CAAC;YAClB,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAClC,IAAI,QAAQ,GAAG,iBAAiB,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YACrE,OAAO,QAAQ,CAAC;SACjB;QACD,KAAK,0EAAW,CAAC,CAAC;YAChB,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAClC,OAAO,8CAAS,CAAC,QAAQ,CAAC,MAAM,CAC9B,IAAI,UAAU,CAAC,OAAO,CAAC,EACvB,IAAI,UAAU,CAAC,SAAS,CAAC,EACzB,IAAI,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CACxB,CAAC;SACH;QACD;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC3D;AACH,CAAC;AAEM,SAAS,OAAO,CACrB,EAAoB,EACpB,GAAoB,EACpB,iBAAiB,GAAG,KAAK,EACzB,SAAkC,uDAAS;IAE3C,MAAM,SAAS,GACb,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,6EAAW,CAAC,GAAG,EAAE,uEAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAClE,QAAQ,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE;QAC3B,KAAK,4EAAa,CAAC,CAAC;YAClB,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAClC,MAAM,WAAW,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE;gBAClE,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YACH,OAAO,iBAAiB;gBACtB,CAAC,CAAC,iGAAwB,CAAC,WAAW,CAAC;gBACvC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;SAClD;QACD,KAAK,0EAAW,CAAC,CAAC;YAChB,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAClC,OAAO,MAAM,CAAC,IAAI,CAChB,8CAAS,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CACrE,CAAC;SACH;QACD;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC3D;AACH,CAAC;;;;;;;;ACzED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACD;AACT;AAEpC,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,mCAAkB;IAClB,oCAAmB;IACnB,oCAAmB;AACrB,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AAEM,SAAS,iBAAiB,CAAC,GAAW;IAC3C,QAAQ,GAAG,EAAE;QACX,KAAK,aAAa,CAAC,MAAM;YACvB,OAAO,aAAa,CAAC,MAAM,CAAC;QAC9B,KAAK,aAAa,CAAC,OAAO;YACxB,OAAO,aAAa,CAAC,OAAO,CAAC;QAC/B,KAAK,aAAa,CAAC,OAAO;YACxB,OAAO,aAAa,CAAC,OAAO,CAAC;QAC/B;YACE,MAAM,mEAAQ,CAAC,mBAAmB,CAAC;KACtC;AACH,CAAC;AAEM,SAAS,gBAAgB,CAAC,GAAQ;IACvC,QAAQ,GAAG,EAAE;QACX,KAAK,kEAAG,CAAC,GAAG;YACV,OAAO,aAAa,CAAC,MAAM,CAAC;QAC9B,KAAK,kEAAG,CAAC,IAAI;YACX,OAAO,aAAa,CAAC,OAAO,CAAC;QAC/B,KAAK,kEAAG,CAAC,IAAI;YACX,OAAO,aAAa,CAAC,OAAO,CAAC;QAC/B;YACE,OAAO,aAAa,CAAC,MAAM,CAAC;KAC/B;AACH,CAAC;AAEM,SAAS,eAAe,CAAC,MAAc;IAC5C,MAAM,iBAAiB,GAAG,iDAAK,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpE,OAAO,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACxC,CAAC;;;;;;;;;;;;ACvCgC;AAEjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS;IACxB,6CAAa,CAAC,EAAE,IAAI,EAAE,uCAAuC,EAAE,CAAC,CAAC;AAE5D,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa;IACxC,eAAe,EAAE,aAAO,CAAC,GAAG,CAAC,eAAe,mCAAI,wBAAwB;CACzE,CAAC;;;;;;;;ACAF;AAAO,MAAe,OAAO;IAI3B,YAAsB,MAAiB,EAAE,OAAuB;;QAA1C,WAAM,GAAN,MAAM,CAAW;QACrC,IAAI,CAAC,IAAI,GAAG;YACV,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,aAAO,CAAC,WAAW,mCAAI,2BAA2B;YAC/D,KAAK,EAAE,aAAO,CAAC,KAAK,mCAAI,qBAAqB;YAC7C,QAAQ,EAAE,aAAO,CAAC,QAAQ,mCAAI,aAAa;YAC3C,QAAQ,EAAE,aAAO,CAAC,QAAQ,mCAAI,IAAI;YAClC,mBAAmB,EACjB,aAAO,CAAC,mBAAmB,mCAAK,CAAC,eAAe,CAAS;SAC5D,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,MAAM,CAAC,IAAU,EAAE,OAAgB;QAC9C,MAAM,UAAU,GACd,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CACtB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CACvD,KAAK,SAAS,CAAC;QAClB,MAAM,aAAa,GACjB,OAAO,CAAC,MAAM,KAAK,IAAI;YACrB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC1D,UAAU,EAAE,IAAI;gBAChB,UAAU,EAAE,IAAI;aACjB,CAAC;YACJ,CAAC,CAAC,KAAK,CAAC;QAEZ,IAAI,CAAC,aAAa,IAAI,UAAU,EAAE;YAChC,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,CACxB,qEAAqE,CACtE,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,IAAU,EAAE,KAAY;QACzC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QAEpC,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CACzC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC,KAAK,KAAK,KAAK,CAC/C,CAAC,CAAC,CAAC,CAAC;YACL,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,OAAO,CAClB,OAAmB,EACnB,OAAuB;QAEvB,MAAM,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC;CAQF;;;;;;;;AC5FD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACC;;;;;;;ACD5B,qC;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACH;;;;;;;;ACChC;AAAO,MAAM,QAAQ,GAAgB;IACnC,QAAQ,EAAE;QACR,QAAQ,EAAE;YACR,IAAI,EAAE,WAAW;YACjB,IAAI,EAAE,SAAS;SAChB;KACF;IACD,MAAM,EAAE,GAAG;CACZ,CAAC;;;;;;;;;;;;;;;;;;ACVsC;AACP;AAEQ;AACJ;AAIrC,IAAa,aAAa,GAA1B,MAAa,aAAa;IAA1B;QACS,aAAQ,GAAgC,IAAI,qDAAU,EAG1D,CAAC;IA+BN,CAAC;IA7BC;;;;OAIG;IACI,kBAAkB,CAAC,MAAiB;QACzC,yDAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,gBAAgB,CAAC,MAAiB;QACvC,uDAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACzB,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YAC5B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvB,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAU,EAAE,EAAE;gBAClC,OAAO,CAAC,GAAG,CAAC,uBAAuB,SAAS,GAAG,CAAC,CAAC;gBACjD,2BAA2B;gBAC3B,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAnCY,aAAa;IADzB,sDAAO,EAAE;GACG,aAAa,CAmCzB;AAnCyB;;;;;;;ACR1B,iC;;;;;;ACAA,4D;;;;;;ACAA,uD;;;;;;ACAA,6C;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAwB;AACG;AACH;;;;;;;;;;;;;;;;ACFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AAOd;AACsB;AAEtD,0HAA0H;AAE1H,iHAAiH;AAC1G,KAAK,UAAU,mBAAmB,CACvC,KAAY,EACZ,UAA8B;IAE9B,MAAM,cAAc,GAAG,iBAAiB,CAAI,KAAK,CAAC,CAAC;IACnD,OAAO,MAAM,kBAAkB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;AAC9D,CAAC;AAED,+GAA+G;AACxG,SAAS,iBAAiB,CAAI,KAAY;IAC/C,QAAQ,KAAK,EAAE;QACb,KAAK,oEAAK,CAAC,IAAI;YACb,OAAO,2EAA4C,CAAC;QACtD;YACE,MAAM,mEAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;KAC1C;AACH,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,SAAiC,EACjC,UAA8B;IAE9B,MAAM,QAAQ,GAAG,MAAO,SAAS,CAAC,IAAI,CAAC,UAAU,CAA4B,CAAC;IAE9E,MAAM,OAAO,GAAG;QACd,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC;QAC5B,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC;QAC1B,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACtC,OAAO,EAAE,SAAS,CAAC,OAAO;QAE1B,8EAA8E;QAC9E,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ;KACzB,CAAC;IAEF,OAAO,OAAqC,CAAC;AAC/C,CAAC;;;;;;;;AChDD;AAAA;AAMgC;AAEzB,IAAU,QAAQ,CAwCxB;AAxCD,WAAiB,QAAQ;IACV,oBAAW,GAAG,CAAC,KAAY,EAAE,EAAE,CAC1C,SAAS,CAAC,uCAAuC,KAAK,SAAS,CAAC,CAAC;IACtD,yBAAgB,GAAG,CAAC,EAAkC,EAAE,EAAE,CACrE,SAAS,CACP,8CAA8C,EAAE,CAAC,MAAM,CAAC,uEAAQ,CAAC,GAAG,CAAC,EAAE,CACxE,CAAC;IACS,sBAAa,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IACjD,0CAAiC,GAAG,GAAG,EAAE,CACpD,SAAS,CACP,sFAAsF,CACvF,CAAC;IACS,yBAAgB,GAAG,GAAG,EAAE,CACnC,SAAS,CAAC,0CAA0C,CAAC,CAAC;IAC3C,4BAAmB,GAAG,CAAC,cAAsB,EAAE,EAAE,CAC5D,SAAS,CAAC,QAAQ,cAAc,qBAAqB,CAAC,CAAC;IAC5C,sBAAa,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;IAC9D,yBAAgB,GAAG,GAAG,EAAE,CACnC,SAAS,CACP,iEAAiE,CAClE,CAAC;IACS,yBAAgB,GAAG,CAAC,SAAiB,EAAE,EAAE,CACpD,SAAS,CAAC,qBAAqB,SAAS,EAAE,CAAC,CAAC;IACjC,yBAAgB,GAAG,CAAC,SAAiB,EAAE,EAAE,CACpD,SAAS,CAAC,0BAA0B,SAAS,EAAE,CAAC,CAAC;IACtC,2BAAkB,GAAG,CAAC,KAAY,EAAE,EAAE,CACjD,SAAS,CACP,wEAAwE,KAAK,EAAE,CAChF,CAAC;IACS,uBAAc,GAAG,GAAG,EAAE;QACjC,SAAS,CAAC,yCAAyC,CAAC,CAAC;IACvD,CAAC,CAAC;IACW,4BAAmB,GAAG,CAAC,UAAkB,EAAE,EAAE,CACxD,SAAS,CAAC,8BAA8B,UAAU,EAAE,CAAC,CAAC;IAC3C,+BAAsB,GAAG,CAAC,GAAQ,EAAE,EAAE,CACjD,SAAS,CACP,+BAA+B,GAAG,kFAAkF,CACrH,CAAC;IACS,4BAAmB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAC9C,SAAS,CAAC,uBAAuB,GAAG,iBAAiB,CAAC,CAAC;AAC3D,CAAC,EAxCgB,QAAQ,KAAR,QAAQ,QAwCxB;AAED,sGAAsG;AACtG,SAAS,SAAS,CAAC,MAAc;IAC/B,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC;;;;;;;;;;;;;;;;ACrDD;AAAA,IAAY,GAIX;AAJD,WAAY,GAAG;IACb,2BAAG;IACH,6BAAI;IACJ,6BAAI;AACN,CAAC,EAJW,GAAG,KAAH,GAAG,QAId;;;;;;;;ACKD;AAAA,IAAY,KAEX;AAFD,WAAY,KAAK;IACf,sBAAa;AACf,CAAC,EAFW,KAAK,KAAL,KAAK,QAEhB;;;;;;;;ACTD;AAAA,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,uDAAK;IACL,uEAAa;IACb,yDAAyD;AAC3D,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;;;;;;;;ACID;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,WAAW,GAAG,SAAS,CAAC;AAC9B,MAAM,aAAa,GAAG,WAAW,CAAC;AAElC,MAAM,eAAe,GAAc,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,aAAa,EAAE,CAAC;AACrE,MAAM,aAAa,GAAY,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;AAItE,IAAY,QAIX;AAJD,WAAY,QAAQ;IAClB,uCAAI;IACJ,qCAAG;IACH,uCAAI;AACN,CAAC,EAJW,QAAQ,KAAR,QAAQ,QAInB;;;;;;;;;;;;;;;;ACpBD;AAAA,IAAY,yBAEX;AAFD,WAAY,yBAAyB;IACnC,kDAAqB;AACvB,CAAC,EAFW,yBAAyB,KAAzB,yBAAyB,QAEpC;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOgC;AAUX;AAE4C;AACH;AAK1C;AACsB;AAEoB;AACe;AAC/B;AAmCvC,MAAM,kBAAkB,GAAuB;IACpD,QAAQ,EAAE,8DAAY;IACtB,EAAE,EAAE,kDAAM;IACV,OAAO,EAAE,8DAAa;IACtB,GAAG,EAAE,oDAAO;IACZ,IAAI;CACL,CAAC;AASF,KAAK,UAAU,IAAI,CAAC,EAClB,SAAS,EACT,eAAe,EACf,OAAO,EACP,OAAO,GACQ;IACf,MAAM,OAAO,GAAG,eAAe,SAAS,WAAW,CAAC;IACpD,MAAM,aAAa,GAAG;QACpB,SAAS,EAAE,SAAS;QACpB,OAAO;QACP,SAAS,EAAE,kBAAkB,SAAS,WAAW;QACjD,aAAa,EAAE,eAAe;QAC9B,OAAO;KACS,CAAC;IACnB,IAAI,OAAO,EAAE;QACX,MAAM,QAAQ,GAAG,IAAI,2EAAgB,EAAE,CAAC;QACxC,MAAM,MAAM,GAAG,IAAI,oEAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,uEAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QACxE,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;QACpD,aAAa,CAAC,IAAI,GAAG;YACnB,QAAQ,EAAE,QAAQ;SACnB,CAAC;QACF,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;KACnC;SAAM,IAAI,OAAO,EAAE;QAClB,MAAM,QAAQ,GAAG,IAAI,2EAAgB,EAAE,CAAC;QACxC,aAAa,CAAC,IAAI,GAAG;YACnB,QAAQ,EAAE,QAAQ;SACnB,CAAC;KACH;SAAM;QACL,MAAM,mEAAQ,CAAC,cAAc,EAAE,CAAC;KACjC;IAED,MAAM,IAAI,GAAG,MAAM,2DAAO,CAAC,aAAa,CAAC,CAAC;IAE1C,OAAO;QACL,IAAI;QACJ,SAAS;QACT,WAAW,EAAE,IAAI,qDAAS,CAAC,eAAe,CAAC,OAAO,CAAC;QACnD,iBAAiB,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;KACvD,CAAC;AACJ,CAAC;;;;;;;;ACvHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACC;AACD;AACA;;;;;;;;ACHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACA;AACA;;;;;;;;ACFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;AACM;AACN;AACQ;AACJ;;;;;;;;ACG5B;AAAA;AAAA;AAAA;AAAsC;AAEN;AAEzB,MAAM,eAAe,GAIxB;IACF,aAAa;IACb,WAAW;IACX,aAAa;IACb,WAAW;IACX,kBAAkB;IAClB,gBAAgB;CACjB,CAAC;AAEF,SAAS,aAAa,CAAQ,SAA2B;IACvD,OAAO,6CAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC;AAED,SAAS,WAAW,CAAQ,EAAU,EAAE,WAAkB;IACxD,MAAM,IAAI,GAAG,6CAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7B,OAAO;QACL,IAAI;QACJ,KAAK,EAAE,WAAW;QAClB,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,kEAAW,CAAC,IAAI,EAAE,GAAG,CAAC;KAClD,CAAC;AACJ,CAAC;AAED,SAAS,aAAa,CAAQ,KAAuB;IACnD,OAAO,6CAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACjC,CAAC;AAED,SAAS,WAAW,CAAQ,EAAU,EAAE,WAAkB;IACxD,MAAM,IAAI,GAAG,6CAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7B,OAAO;QACL,IAAI;QACJ,KAAK,EAAE,WAAW;QAClB,MAAM,EAAE,CAAC,GAAa,EAAE,EAAE,CAAC,kEAAW,CAAC,IAAI,EAAE,GAAG,CAAC;KAClD,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CACzB,cAA8B;IAE9B,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,cAAc,CAAC;IAClC,OAAO;QACL,GAAG,EAAE,6CAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;QACzB,GAAG,EAAE,6CAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;KAC1B,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CACvB,OAA6B,EAC7B,WAAkB;IAElB,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC;IAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC;IAC5B,OAAO;QACL,KAAK,EAAE,WAAW;QAClB,EAAE,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;QACrC,EAAE,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;KACtC,CAAC;AACJ,CAAC;;;;;;;;AClED;AAAO,MAAM,aAAa,GAAG,CAAC,OAAY,EAAE,EAAE,CAC5C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;ACNlD;AAAO,SAAS,uBAAuB,CAAC,MAAc,EAAE,KAAa;IACnE,OAAO,GAAG,MAAM,IAAI,KAAK,EAAE,CAAC;AAC9B,CAAC;;;;;;;;ACFD;AAAA;AAAO,MAAM,aAAa,GAAG,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACjE,qFAAqF;AAC9E,MAAM,eAAe,GAAG,CAAI,UAAkB,EAAE,EAAE,CACvD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAM,CAAC;;;;;;;;ACH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACR;AACC;AAQW;AAkB1D,IAAI,WAAwB,CAAC;AAEtB,KAAK,UAAU,cAAc,CAAC,OAAgB;IACnD,WAAW,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC9C,OAAO,WAAW,CAAC;AACrB,CAAC;AAEM,SAAS,cAAc;IAC5B,IAAI,WAAW;QAAE,OAAO,WAAW,CAAC;IACpC,MAAM,mEAAQ,CAAC,gBAAgB,EAAE,CAAC;AACpC,CAAC;AAED,KAAK,UAAU,gBAAgB,CAAC,OAAgB;IAC9C,MAAM,QAAQ,GAAG,IAAI,oDAAQ,CAAC,OAAO,EAAE,yCAAc,CAAC,YAAY,EAAE;QAClE,WAAW,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;QACpD,aAAa,EAAE,CAAC,kBAAkB,EAAE,qBAAqB,CAAC;KAC3D,CAAC,CAAC;IACH,OAAO;QACL,YAAY,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;YACzB,MAAM,GAAG,GAAG,MAAO,QAAgB,CAAC,cAAc,CAAC;gBACjD,OAAO,EAAE,2EAAS,CAAC,EAAE,CAAC;aACvB,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK,EAAE;gBAAE,OAAO,IAAI,CAAC;;gBAC/B,OAAO,GAAoB,CAAC;QACnC,CAAC;QACD,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE,CACrB,QAAgB,CAAC,iBAAiB,CAAC;YAClC,OAAO,EAAE,2EAAS,CAAC,EAAE,CAAC;SACvB,CAAoB;QACvB,cAAc,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE,CACzD,QAAgB,CAAC,gBAAgB,CAAC;YACjC,OAAO;YACP,OAAO,EAAE,2EAAS,CAAC,EAAE,CAAC;YACtB,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC;YAC3B,cAAc;SACf,CAAC;QACJ,iBAAiB,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAC5C,QAAgB,CAAC,mBAAmB,CAAC;YACpC,OAAO;YACP,OAAO,EAAE,2EAAS,CAAC,EAAE,CAAC;YACtB,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC;SAC5B,CAAC;KACL,CAAC;AACJ,CAAC;AAEM,SAAS,wBAAwB,CAAC,GAAiB;IACxD,OAAO,MAAM,CAAC,IAAI,CAChB,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAC1D,KAAK,CACN,CAAC;AACJ,CAAC;;;;;;;;AC9ED;AAAO,MAAM,oBAAoB,GAAG;IAClC,KAAK;IACL,aAAa,EAAE,UAAU;CAC1B,CAAC;;;;;;;;ACHF;AAAA;AAAA;AAAA;AAA8C;AACC;AACI;AAE5C,SAAS,6BAA6B,CAC3C,MAAc,EACd,KAAY;IAEZ,QAAQ,KAAK,EAAE;QACb,KAAK,oEAAK,CAAC,IAAI;YACb,OAAO,gFAAe,CAAC,MAAM,CAAC,CAAC;QACjC;YACE,MAAM,mEAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;KAC1C;AACH,CAAC;;;;;;;;ACbD;AAAA;AAAA;AAAmE;AAEnE,wBAAwB;AACjB,MAAM,mBAAmB,GAAG,CAAC,aAAqB,EAAmB,EAAE;IAC5E,OAAO,iFAAe,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAoB,CAAC;AAC/E,CAAC,CAAC;AAEK,MAAM,wBAAwB,GAAG,CACtC,KAAY,EACZ,OAAe,EACf,IAAqB,EACrB,EAAE;IACF,OAAO,SAAS,CACd,GAAG,OAAO,uBAAuB,KAAK,CAAC,QAAQ,EAAE,IAAI,kBAAkB,CACrE,+EAAa,CAAC,IAAI,CAAC,CACpB,EAAE,CACJ,CAAC;AACJ,CAAC,CAAC;;;;;;;AClBF,mC;;;;;;;;;;;;;;;;;;;;ACAiE;AAGvC;AACO;AAE2B;AAEH;AAIzD,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,iDAAa;IAGvC,YAA6B,aAA4B;;QACvD,KAAK,CAAC,qEAAa,CAAC,aAAa,mCAAI,EAAE,CAAC,CAAC;QADd,kBAAa,GAAb,aAAa,CAAe;QAEvD,IAAI,CAAC,QAAQ,GAAG,+DAAa,CAAC;QAC9B,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,UAAU;QAChB,IAAI;YACF,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC3C;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,6BAA6B,CAAW,EAAE,CAAC,CAAC;SAC3D;IACH,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACrC,CAAC;CACF;AArBY,MAAM;IADlB,sDAAO,EAAE;uGAIoC,6EAAa,oBAAb,6EAAa;GAH9C,MAAM,CAqBlB;AArBkB;;;;;;;;ACZnB;AAAA;AAA0B;AACA;AACX,0DAAC,qDAAI,EAAE,qDAAI,CAAC,EAAC;;;;;;;;ACD5B;AAAA;AAAqC;AAGtB,MAAM,IAAK,SAAQ,wDAAO;IACvC,YAAY,MAAiB;QAC3B,KAAK,CAAC,MAAM,EAAE;YACZ,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,gBAAgB;YAC7B,QAAQ,EAAE,aAAa;YACvB,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YAC5C,QAAQ,EAAE,IAAI;YACd,mBAAmB,EAAE,CAAC,eAAe,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,OAAgB;QAC/B,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;CACF;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AAEmC;AACE;AAChB;AAK1B;AAEjB,MAAM,SAAU,SAAQ,wDAAO;IAC5C,YAAsB,MAAiB;QACrC,KAAK,CAAC,MAAM,EAAE;YACZ,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,4CAA4C;YACzD,QAAQ,EAAE,SAAS;YACnB,KAAK,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,gFAAgF;YAChH,QAAQ,EAAE,IAAI;YACd,mBAAmB,EAAE,EAAE;SACxB,CAAC,CAAC;QARiB,WAAM,GAAN,MAAM,CAAW;IASvC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,OAAgB;QAC/B,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC1C;QAED,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1C,MAAM,KAAK,CAAC,OAAO,CACjB,OAAO,CAAC,OAAO,EACf,8BAA8B,MAAM,CAAC,MAAM,GAAG,CAAC,eAC7C,IAAI,CAAC,IAAI,CAAC,KACZ,IAAI,CACL,CAAC;YACF,OAAO;SACR;QAED,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACxB,MAAM,KAAK,CAAC,OAAO,CACjB,OAAO,CAAC,OAAO,EACf,8CAA8C,CAC/C,CAAC;YACF,OAAO;SACR;QACD,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,SAAiB,CAAC;QACtB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAClB,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACvB;aAAM;YACL,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACvB;QAED,kDAAkD;QAClD,IAAI,eAAuB,CAAC;QAC5B,IAAI;YACF,eAAe,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3D;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,KAAK,CAAC,OAAO,CACjB,OAAO,CAAC,OAAO,EACf,4CAA4C,CAC7C,CAAC;YACF,OAAO;SACR;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACjE,MAAM,qBAAqB,GAAG,GAAG,aAAa,CAAC,QAAQ,IAAI,aAAa,CAAC,aAAa,EAAE,CAAC;QAEzF,IAAI;YACF,MAAM,EAAE,GAAoB;gBAC1B,eAAe,EAAE,eAAe;gBAChC,uBAAuB,EAAE,qBAAqB;gBAC9C,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,wFAAyB,CAAC,QAAQ;wBACxC,MAAM,EAAE,qGAA6B,CAAC,MAAM,EAAE,oEAAK,CAAC,IAAI,CAAC;qBAC1D;iBACF;gBACD,aAAa,EAAE,SAAS;aACzB,CAAC;YACF,MAAM,IAAI,GAAG,uGAAwB,CACnC,oEAAK,CAAC,IAAI,EACV,6EAAW,CAAC,eAAe,EAC3B,EAAE,CACH,CAAC;YAEF,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,KAAK,CAAC,OAAO,CACjB,OAAO,CAAC,OAAO,EACf;cACM,GAAG;uHACsG,CAChH,CAAC;YACF,OAAO;SACR;IACH,CAAC;CACF;;;;;;;;ACvGD;AAAA;AAAA;AAAsB;;;;;;;;ACAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWgC;AAEY;AACZ;AACT;AAOF;AAKqB;AAOgB;AA6BnD,SAAS,MAAM,CAAC,QAAmB;IACxC,OAAO;QACL,KAAK,EAAE,WAAW,CAAC,QAAQ,CAAC;QAC5B,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;QAC1B,wBAAwB,EAAE,wBAAwB,CAAC,QAAQ,CAAC;QAC5D,2BAA2B;KAC5B,CAAC;AACJ,CAAC;AAED,SAAS,iBAAiB,CAAC,MAAkB;IAC3C,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,wFAAyB,CAAC,QAAQ;YACrC,OAAO,wDAAY,CAAC,QAAQ,CAC1B,IAAI,4CAAE,CAAE,MAAkC,CAAC,MAAM,EAAE,EAAE,CAAC,CACvD,CAAC;QACJ;YACE,MAAM,kBAAkB,MAAM,CAAC,IAAI,iBAAiB,CAAC;KACxD;AACH,CAAC;AAEM,MAAM,2BAA2B,GAAG,CACzC,QAA2B,EACR,EAAE;IACrB,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC1B,CAAC,CAAC;AAEK,MAAM,wBAAwB,GAAG,CAAC,QAAmB,EAAE,EAAE,CAAC,KAAK,EACpE,QAAyB,EACzB,WAAiC,EACjC,SAA+B,EAC/B,QAA4B,EACA,EAAE;IAC9B,MAAM,kBAAkB,GAAG,MAAM,uFAAc,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC5E,MAAM,kBAAkB,GAAsB;QAC5C,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,QAAQ,EAAE,QAAQ;QAClB,eAAe,EAAE,QAAQ,CAAC,iBAAiB,CAAC,SAAS;QACrD,kBAAkB;KACnB,CAAC;IACF,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAC;AAEK,MAAM,WAAW,GAAG,CAAC,QAAmB,EAAE,EAAE,CAAC,KAAK,EAAE,EACzD,OAAO,EACP,QAAQ,EACR,eAAe,EACf,kBAAkB,GACA,EAAwB,EAAE;IAC5C,MAAM,YAAY,GAAG,8DAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC3D,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,KAAK,CAChD,cAAc,eAAe,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,EAC1D,EAAE,CACH,CAAC;IAEF,MAAM,KAAK,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC;IAChC,MAAM,eAAe,GAAG,iDAAK,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC1E,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAErD,OAAO,wDAAY,CAAC,iBAAiB,CACnC,eAAe,EACf,YAAY,EACZ,kBAAkB,EAClB,KAAK,EACL,aAAa,EACb,eAAe,CAChB,CAAC;AACJ,CAAC,CAAC;AAEK,KAAK,UAAU,UAAU,CAC9B,EAA4B,EAC5B,OAAuB,EACvB,KAAsB;IAEtB,MAAM,WAAW,GAAG,8DAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAC9D,MAAM,YAAY,GAAG,iDAAK,CAAC,SAAS,CAAC,SAAS,CAAC,wDAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACxE,MAAM,gBAAgB,GAAG,IAAI,UAAU,CAAC,yEAAM,CAAC,6CAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC3E,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACrD,oDAAoD;IACpD,OAAO,IAAI,wDAAY,CAAC,iBAAiB,CAAC;QACxC,WAAW,EAAE,EAAE;QACf,SAAS,EAAE,IAAI,wDAAY,CAAC,SAAS,CAAC;YACpC,OAAO,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO;YAC7B,IAAI,EAAE,SAAS,CAAC,SAAS;SAC1B,CAAC;KACH,CAAC,CAAC;AACL,CAAC;AAEM,MAAM,UAAU,GAAG,CAAC,QAAmB,EAAE,EAAE,CAAC,KAAK,EACtD,EAAqB,EACwB,EAAE;IAC/C,MAAM,UAAU,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;IAC/B,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,qBAAqB,EAAE;QAC3E,6CAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;KAC3C,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,oBAAoB,QAAQ,CAAC,SAAS,0BAA0B,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC/G,OAAO;QACL,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,YAAY;KAClB,CAAC;AACJ,CAAC,CAAC;;;;;;;;ACpKF;AAAA;AAAA;AAA6B;;;;;;;ACA7B,oC;;;;;;ACAA,sC;;;;;;;;;;;;ACAA,kC;;;;;;;ACEA;AAAA;AAAA;AAA2D;AAe3D,4CAA4C;AAErC,SAAS,OAAO,CAAC,SAAoB;IAC1C,OAAO;QACL,QAAQ,EAAE,UAAU;KACrB,CAAC;AACJ,CAAC;AAEM,SAAS,UAAU,CAAC,OAAgB;IACzC,MAAM,SAAS,GAAkB,wEAAiB,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,SAAS,CAAC,CAAC;IACzE,OAAO,eAAe,SAAS,WAAW,CAAC;AAC7C,CAAC;;;;;;;;AC5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMgC;AAMS;AAKC;AACI;AAIvC,SAAS,YAAY,CAC1B,SAAoB;IAEpB,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC;IAC3B,OAAO;QACL,MAAM,EAAE,KAAK,EAAE,SAAwB,EAAwB,EAAE,CAC/D,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QAE/B,uBAAuB,EAAE,GAAG,EAAE;YAC5B,OAAO;gBACL,UAAU,EAAE,KAAK,IAAI,EAAE,CACrB,CAAC,MAAM,SAAS,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,CAAC;qBACpD,KAAgB;aACtB,CAAC;QACJ,CAAC;QACD,MAAM,EAAE,KAAK,EAAE,EACb,SAAS,EACT,YAAY,EACZ,cAAc,EACd,MAAM,GAAG,QAAQ,GACO,EAAwB,EAAE;YAClD,IAAI,MAAM,KAAK,OAAO,IAAI,CAAC,cAAc,EAAE;gBACzC,MAAM,mEAAQ,CAAC,kBAAkB,CAAC,oEAAK,CAAC,IAAI,CAAC,CAAC;aAC/C;YACD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACpE,MAAM,cAAc,GAClB,MAAM,KAAK,QAAQ;gBACjB,CAAC,CAAC,IAAI,iFAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC/D,CAAC,CAAC,IAAI,mFAAmB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YAE7D,MAAM,cAAc,CAAC,aAAa,CAChC,SAAS,EACT,8DAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAC1C,CAAC;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACvC,CAAC;KACF,CAAC;AACJ,CAAC;;;;;;;AC3DD,kD;;;;;;;ACAA;AAAA;AAAA;AAAyC;;;;;;;;ACAzC;AAAA;AAAgC;AACJ;AAEb,0DAAC,wDAAO,EAAE,sDAAK,CAAC,EAAC;;;;;;;;ACHhC;AAAA;AAAA;AAAA,6DAA6D;AACN;AAGxC,MAAM,OAAO;IAC1B,YAA6B,MAAiB;QAAjB,WAAM,GAAN,MAAM,CAAW;IAAG,CAAC;IAElD,IAAI;QACF,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,IAAU;QACzB,IAAI,CAAC,CAAC,IAAI,YAAY,kDAAc,CAAC,EAAE;YACrC,mBAAmB;YACnB,OAAO,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;YAChD,OAAO,IAAI,CAAC;SACb;QAED,MAAM,OAAO,GAAmB,IAAI,CAAC;QAErC,IACE,OAAO,CAAC,MAAM,CAAC,GAAG;YAClB,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAExD,OAAO;QAET,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,EAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACzE,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE9C,IAAI,GAAG,KAAK,SAAS,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACnE,OAAO;QACT,MAAM,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAE9B,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI;YAAE,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC;CACF;;;;;;;;AClCD;AAAe,MAAM,KAAK;IAExB,YAAY,MAAiB;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,IAAI;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;YAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,YAAY,CAAC,CAAC;YACtD,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACnE;IACH,CAAC;CACF;;;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AAC+B;AACtB;AACD;AAElC,uCAAuC;AACvC,MAAM,MAAM,GAAG,gDAAS,CAAC,GAAG,CAAS,sDAAM,CAAC,CAAC;AAE7C,MAAM;KACH,KAAK,CAAC,6EAAW,CAAC,aAAa,CAAC;KAChC,IAAI,CAAC,GAAG,EAAE;IACT,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AAChD,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 68);\n","export * from './lib/platforms';\nexport * from './lib/configs';\nexport * from './lib/chains';\nexport * from './lib/keysource';\nexport * from './lib/crypto';\nexport * from './lib/frontend';\nexport * from './lib/generic-tx';\n","export * from './lib/errors';\n","export * from './lib/utils';\n","module.exports = require(\"near-api-js\");","module.exports = require(\"buffer\");","module.exports = require(\"tweetnacl\");","import * as sha3 from 'js-sha3';\nimport { sha256 as js_sha256 } from 'js-sha256';\n\nexport function keccak256(msg: Buffer): Buffer {\n  return Buffer.from(sha3.keccak256(msg), 'hex');\n}\n\nexport function sha256(msg: Buffer): Buffer {\n  return Buffer.from(js_sha256(msg), 'hex');\n}\n\n// add more wrappers here as needed\n","import {\n  Converter,\n  KeyPair,\n  PublicKey,\n  Encoding,\n} from '@baf-wallet/interfaces';\nimport { KeyPair as NearKeyPair, utils as NearUtils } from 'near-api-js';\nimport { bufferConverter, encodeBytes, formatBytes } from '@baf-wallet/utils';\nimport { Buffer } from 'buffer';\nimport { BafError } from '@baf-wallet/errors';\n\nexport const nearConverter: Converter<\n  NearUtils.PublicKey,\n  Buffer,\n  NearKeyPair\n> = {\n  ...bufferConverter,\n\n  pkToUnified<Curve>(\n    pk: NearUtils.PublicKey,\n    curveMarker: Curve\n  ): PublicKey<Curve> {\n    if (curveMarker.toString() !== 'ed25519') {\n      throw BafError.UnsupportedKeyCurve('ed25519');\n    }\n    const data = Buffer.from(pk.data);\n    return {\n      curve: curveMarker,\n      data: data,\n      format: (fmt: Encoding) => formatBytes(data, fmt),\n    };\n  },\n\n  pkFromUnified: <Curve>(unifiedPk: PublicKey<Curve>): NearUtils.PublicKey =>\n    NearUtils.PublicKey.fromString(unifiedPk.format(Encoding.BS58)),\n\n  keyPairToUnified<Curve>(\n    keyPair: NearKeyPair,\n    curveMarker: Curve\n  ): KeyPair<Curve> {\n    const skFmt = keyPair.toString();\n    if (!skFmt.startsWith(curveMarker.toString())) {\n      throw BafError.UnsupportedKeyCurve('ed25519');\n    }\n\n    const skStr = skFmt.split(':')[1];\n    const skData = encodeBytes(skStr, Encoding.BS58);\n    const pkData = Buffer.from(keyPair.getPublicKey().data);\n\n    return {\n      curve: curveMarker,\n      pk: {\n        curve: curveMarker,\n        data: pkData,\n        format: (fmt: Encoding) => formatBytes(pkData, fmt),\n      },\n      sk: {\n        curve: curveMarker,\n        data: skData,\n        format: (fmt: Encoding) => formatBytes(skData, fmt),\n      },\n    };\n  },\n\n  keyPairFromUnified<Curve>(unifiedKeyPair: KeyPair<Curve>): NearKeyPair {\n    const prefix = unifiedKeyPair.curve.toString();\n    const skStr = unifiedKeyPair.sk.format(Encoding.BS58);\n    return NearKeyPair.fromString(`${prefix}:${skStr}`);\n  },\n};\n","module.exports = require(\"typedi\");","module.exports = require(\"discord.js\");","import { Encoding, PublicKey, SecretKey } from '@baf-wallet/interfaces';\nimport { BafError } from '@baf-wallet/errors';\nimport * as bs58 from 'bs58';\n\nexport function formatBytes(buf: Buffer, fmt = Encoding.HEX) {\n  switch (fmt) {\n    case Encoding.HEX:\n      return Buffer.from(buf).toString('hex');\n    case Encoding.BS58:\n      return bs58.encode(Buffer.from(buf));\n    default:\n      throw BafError.UnsupportedEncoding(fmt);\n  }\n}\n\nexport function encodeBytes(str: string, fmt: Encoding): Buffer {\n  switch (fmt) {\n    case Encoding.HEX:\n      return Buffer.from(str, 'hex');\n    case Encoding.BS58:\n      return bs58.decode(str);\n    case Encoding.UTF8:\n      return Buffer.from(str, 'utf8');\n    default:\n      throw BafError.UnsupportedEncoding(fmt);\n  }\n}\n\nexport function pkToArray<Curve>(key: PublicKey<Curve>): number[] {\n  return [...key.data];\n}\n\nexport function pkToString<Curve>(\n  key: PublicKey<Curve>,\n  keyFormat = Encoding.HEX\n): string {\n  return formatBytes(key.data, keyFormat);\n}\n\nexport function pkFromString<Curve>(\n  key: string,\n  curve: Curve,\n  keyFormat = Encoding.HEX\n): PublicKey<Curve> {\n  const data = encodeBytes(key, keyFormat);\n  return {\n    data,\n    curve,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n\nexport function skFromString<Curve>(\n  key: string,\n  curve: Curve,\n  keyFormat = Encoding.HEX\n): SecretKey<Curve> {\n  const data = encodeBytes(key, keyFormat);\n  return {\n    data,\n    curve,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n","module.exports = require(\"tslib\");","import { BafError } from '@baf-wallet/errors';\nimport {\n  PublicKey,\n  SecretKey,\n  KeyPair,\n  SECP256K1_STR,\n  ED25519_STR,\n  secp256k1,\n  secp256k1Marker,\n} from '@baf-wallet/interfaces';\nimport { bufferConverter } from '@baf-wallet/utils';\nimport { ec as EC } from 'elliptic';\nimport * as nacl from 'tweetnacl';\n\nconst ellipticSecp256k1 = new EC('secp256k1');\n\nexport function pkSecpFromXY(x: string, y: string): PublicKey<secp256k1> {\n  const key = ellipticSecp256k1.keyFromPublic({ x, y }, 'hex');\n  return bufferConverter.pkToUnified(\n    Buffer.from(key.getPublic('array')),\n    secp256k1Marker\n  );\n}\n\nexport function keyPairFromSk<Curve>(sk: SecretKey<Curve>): KeyPair<Curve> {\n  const pk = pkFromSk(sk);\n  return {\n    curve: sk.curve,\n    pk,\n    sk,\n  };\n}\n\nexport function pkFromSk<Curve>(sk: SecretKey<Curve>): PublicKey<Curve> {\n  switch (sk.curve.toString()) {\n    case SECP256K1_STR: {\n      const data = Buffer.from(\n        ellipticSecp256k1.keyFromPrivate(sk.data).getPublic(false, 'hex'),\n        'hex'\n      );\n\n      return bufferConverter.pkToUnified(data, sk.curve);\n    }\n    case ED25519_STR: {\n      const data = Buffer.from(\n        nacl.sign.keyPair.fromSecretKey(new Uint8Array(sk.data)).publicKey\n      );\n\n      return bufferConverter.pkToUnified(data, sk.curve);\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(sk.curve.toString());\n  }\n}\n\nexport function skFromSeed<Curve>(\n  seed: Uint8Array,\n  curveMarker: Curve\n): SecretKey<Curve> {\n  switch (curveMarker.toString()) {\n    case SECP256K1_STR: {\n      const entropy = nacl.hash(seed);\n      const ellipticSk = ellipticSecp256k1\n        .genKeyPair({ entropy })\n        .getPrivate('hex');\n\n      const data = Buffer.from(ellipticSk, 'hex');\n      return bufferConverter.skToUnified(data, curveMarker);\n    }\n    case ED25519_STR: {\n      const data = Buffer.from(\n        nacl.sign.keyPair.fromSeed(new Uint8Array(Buffer.from(seed))).secretKey\n      );\n\n      return bufferConverter.pkToUnified(data, curveMarker);\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(curveMarker.toString());\n  }\n}\n\nexport function skFromRng<Curve>(curveMarker: Curve): SecretKey<Curve> {\n  switch (curveMarker.toString()) {\n    case ED25519_STR: {\n      const data = Buffer.from(nacl.sign.keyPair().secretKey);\n      return bufferConverter.skToUnified(data, curveMarker);\n    }\n    case SECP256K1_STR: {\n      const data = Buffer.from(\n        ellipticSecp256k1.genKeyPair().getPrivate('hex'),\n        'hex'\n      );\n      return bufferConverter.pkToUnified(data, curveMarker);\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(curveMarker.toString());\n  }\n}\n","import {\n  SecretKey,\n  PublicKey,\n  KeyPair,\n  secp256k1,\n  ed25519,\n  ED25519_STR,\n  SECP256K1_STR,\n  Encoding,\n} from '@baf-wallet/interfaces';\nimport { keccak256, sha256 } from './hash';\nimport { ec as EC } from 'elliptic';\nimport * as nacl from 'tweetnacl';\nimport { encodeBytes } from '@baf-wallet/utils';\nimport { encodeSecpSigBafContract } from '@baf-wallet/baf-contract';\nimport { BafError } from '@baf-wallet/errors';\n\nconst ellipticSecp256k1 = new EC('secp256k1');\n\nexport function verifySignature<Curve>(\n  pk: PublicKey<Curve>,\n  msg: Buffer | string,\n  signedMsg: Buffer,\n  hashFn: (buf: Buffer) => Buffer = keccak256\n): boolean {\n  const msgFormat =\n    typeof msg === 'string' ? encodeBytes(msg, Encoding.UTF8) : msg;\n  switch (pk.curve.toString()) {\n    case SECP256K1_STR: {\n      const msgHash = hashFn(msgFormat);\n      let validSig = ellipticSecp256k1.verify(msgHash, signedMsg, pk.data);\n      return validSig;\n    }\n    case ED25519_STR: {\n      const msgHash = hashFn(msgFormat);\n      return nacl.sign.detached.verify(\n        new Uint8Array(msgHash),\n        new Uint8Array(signedMsg),\n        new Uint8Array(pk.data)\n      );\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(pk.curve.toString());\n  }\n}\n\nexport function signMsg<Curve>(\n  sk: SecretKey<Curve>,\n  msg: Buffer | string,\n  bafContractFormat = false,\n  hashFn: (buf: Buffer) => Buffer = keccak256\n): Buffer {\n  const msgFormat =\n    typeof msg === 'string' ? encodeBytes(msg, Encoding.UTF8) : msg;\n  switch (sk.curve.toString()) {\n    case SECP256K1_STR: {\n      const msgHash = hashFn(msgFormat);\n      const ellipticSig = ellipticSecp256k1.sign(msgHash, sk.data, 'hex', {\n        canonical: true,\n      });\n      return bafContractFormat\n        ? encodeSecpSigBafContract(ellipticSig)\n        : Buffer.from(ellipticSig.toDER('hex'), 'hex');\n    }\n    case ED25519_STR: {\n      const msgHash = hashFn(msgFormat);\n      return Buffer.from(\n        nacl.sign.detached(new Uint8Array(msgHash), new Uint8Array(sk.data))\n      );\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(sk.curve.toString());\n  }\n}\n","import { BafError } from '@baf-wallet/errors';\nimport { Env } from '@baf-wallet/interfaces';\nimport { utils } from 'near-api-js';\n\nexport enum NearNetworkID {\n  DEVNET = 'testnet',\n  TESTNET = 'testnet',\n  MAINNET = 'mainnet',\n}\n\nexport function stringToNetworkID(str: string): NearNetworkID {\n  switch (str) {\n    case NearNetworkID.DEVNET:\n      return NearNetworkID.DEVNET;\n    case NearNetworkID.TESTNET:\n      return NearNetworkID.TESTNET;\n    case NearNetworkID.MAINNET:\n      return NearNetworkID.MAINNET;\n    default:\n      throw BafError.UnknownNetworkIdent;\n  }\n}\n\nexport function getNearNetworkID(env: Env): NearNetworkID {\n  switch (env) {\n    case Env.DEV:\n      return NearNetworkID.DEVNET;\n    case Env.TEST:\n      return NearNetworkID.TESTNET;\n    case Env.PROD:\n      return NearNetworkID.MAINNET;\n    default:\n      return NearNetworkID.DEVNET;\n  }\n}\n\nexport function nearToYoctoNear(amount: number): string {\n  const amountYoctoNearBN = utils.format.NEAR_NOMINATION.muln(amount);\n  return amountYoctoNearBN.toString(10);\n}\n","import * as dotenv from 'dotenv';\n\nif (!process.env.NON_LOCAL)\n  dotenv.config({ path: './apps/bot/src/environments/.env.test' });\n\nexport const environment = {\n  production: false,\n  DISCORD_TOKEN: process.env.DISCORD_TOKEN,\n  BASE_WALLET_URL: process.env.BASE_WALLET_URL ?? 'https://localhost:4200',\n};\n","import { Guild, Message, User } from 'discord.js';\nimport {\n  AnyChannel,\n  BotClient,\n  CommandOptions,\n  EmbedOrMessage,\n  UserCooldown,\n} from './types';\n\nexport abstract class Command {\n  public conf: CommandOptions;\n  public cooldowns: Set<UserCooldown>;\n\n  constructor(protected client: BotClient, options: CommandOptions) {\n    this.conf = {\n      name: options.name,\n      description: options.description ?? 'No information specified.',\n      usage: options.usage ?? 'No usage specified.',\n      category: options.category ?? 'Information',\n      cooldown: options.cooldown ?? 1000,\n      requiredPermissions:\n        options.requiredPermissions ?? (['READ_MESSAGES'] as any),\n    };\n    this.cooldowns = new Set();\n  }\n\n  /**\n   * Checks if the user has permission to run the command.\n   * @param {User} user A Discord user.\n   * @param {Message} message The original message that was sent.\n   * @returns {boolean} Whether the user can run the command.\n   */\n  public async canRun(user: User, message: Message): Promise<boolean> {\n    const onCooldown =\n      [...this.cooldowns].find(\n        (cd) => cd.user === user && cd.guild === message.guild\n      ) !== undefined;\n    const hasPermission =\n      message.member !== null\n        ? message.member.hasPermission(this.conf.requiredPermissions, {\n            checkAdmin: true,\n            checkOwner: true,\n          })\n        : false;\n\n    if (!hasPermission || onCooldown) {\n      await message.channel.send(\n        'You do not have permission for this command or you are on cooldown.'\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the cooldown on a command for a Discord user.\n   * @param {User} user The user that will receive a cooldown.\n   * @param {Guild} guild The Discord server where the original message was sent.\n   */\n  public setCooldown(user: User, guild: Guild): void {\n    this.cooldowns.add({ user, guild });\n\n    setTimeout(() => {\n      const cooldown = [...this.cooldowns].filter(\n        (cd) => cd.user === user && cd.guild === guild\n      )[0];\n      this.cooldowns.delete(cooldown);\n    }, this.conf.cooldown);\n  }\n\n  /**\n   * Sends the message in the specified channel.\n   * @param {AnyChannel} channel Any Discord channel.\n   * @param {EmbedOrMessage} message The message or embed that will be sent.\n   * @returns {Promise<Command>} The original command, supports method chaining.\n   */\n  public async respond(\n    channel: AnyChannel,\n    message: EmbedOrMessage\n  ): Promise<Command> {\n    await channel.send(message);\n\n    return this;\n  }\n\n  /**\n   * default run method for every command - does nothing\n   * @param {Message} message The original message object that triggered the command.\n   * @param {string[]} args The arguments that got sent with the message.\n   */\n  public abstract run(message: Message, args: string[]): Promise<void>;\n}\n","export * from './lib/near';\nexport * from './lib/utils';\n","module.exports = require(\"elliptic\");","export * from './lib/baf-contract';\nexport * from './lib/constants';\n","import { BotSettings } from '../types';\n\nexport const settings: BotSettings = {\n  presence: {\n    activity: {\n      name: 'Just HODL',\n      type: 'PLAYING',\n    },\n  },\n  prefix: '%',\n};\n","import { Collection } from 'discord.js';\nimport { Service } from 'typedi';\nimport { Command } from '../Command';\nimport commandClasses from '../commands';\nimport eventClasses from '../events';\nimport { BotClient } from '../types';\n\n@Service()\nexport class ActionManager {\n  public commands: Collection<string, Command> = new Collection<\n    string,\n    Command\n  >();\n\n  /**\n   * Parses files into commands from the configured command path.\n   * @param {BotClient} client The original client, for access to the configuration.\n   * @returns {Collection<string, Command>} A dictionary of every command in a [name, object] pair.\n   */\n  public initializeCommands(client: BotClient): void {\n    commandClasses.forEach((C) => {\n      const command = new C(client);\n      console.log(command.conf.name);\n      this.commands.set(command.conf.name, command);\n    });\n  }\n\n  /**\n   * Initializes every event from the configured event path.\n   * @param {BotClient} client The original client, for access to the configuration.\n   */\n  public initializeEvents(client: BotClient): void {\n    eventClasses.forEach((C) => {\n      const event = new C(client);\n      const eventName = event.name();\n      console.log(eventName);\n      client.on(eventName, (args?: any) => {\n        console.log(`got a event of type ${eventName}!`);\n        // eslint-disable-next-line\n        event.run(args);\n      });\n    });\n  }\n}\n","module.exports = require(\"bs58\");","module.exports = require(\"near-api-js/lib/account_creator\");","module.exports = require(\"near-api-js/lib/key_stores\");","module.exports = require(\"reflect-metadata\");","export * from './types';\nexport * from './switches';\nexport * from './utils';\n","import { BafError } from '@baf-wallet/errors';\nimport {\n  InferChainInterface,\n  Chain,\n  InferInner,\n  InferWrapChainInterface,\n  InferInitParams,\n} from '@baf-wallet/interfaces';\nimport { nearChainInterface } from '@baf-wallet/near';\n\n// these are kind of ugly, but the ugly should be limited to here, all in the pursuit of typed-ness and editor completions\n\n// NOTE: This will return the wrong type if you put in a type paramteter that conflicts with the 'chain' argument\nexport async function getWrappedInterface<T>(\n  chain: Chain,\n  initParams: InferInitParams<T>\n): Promise<InferWrapChainInterface<T>> {\n  const chainInterface = getChainInterface<T>(chain);\n  return await wrapChainInterface(chainInterface, initParams);\n}\n\n// NOTE: This will return the wrong type if you put in a type paramter that conflicts with the 'chain' argument\nexport function getChainInterface<T>(chain: Chain): InferChainInterface<T> {\n  switch (chain) {\n    case Chain.NEAR:\n      return nearChainInterface as InferChainInterface<T>;\n    default:\n      throw BafError.UnsupportedChain(chain);\n  }\n}\n\nexport async function wrapChainInterface<T>(\n  unwrapped: InferChainInterface<T>,\n  initParams: InferInitParams<T>\n): Promise<InferWrapChainInterface<T>> {\n  const innerSdk = await (unwrapped.init(initParams) as Promise<InferInner<T>>);\n\n  const wrapped = {\n    rpc: unwrapped.rpc(innerSdk),\n    tx: unwrapped.tx(innerSdk),\n    accounts: unwrapped.accounts(innerSdk),\n    convert: unwrapped.convert,\n\n    // Note: in the future, some chainInterfaces might want to do stuff in this fn\n    getInner: () => innerSdk,\n  };\n\n  return wrapped as InferWrapChainInterface<T>;\n}\n","import {\n  Chain,\n  PublicKey,\n  ed25519,\n  secp256k1,\n  Encoding,\n} from '@baf-wallet/interfaces';\n\nexport namespace BafError {\n  export const UninitChain = (chain: Chain) =>\n    emitError(`You must initialize your account on ${chain} first.`);\n  export const InvalidSignature = (pk: PublicKey<ed25519 | secp256k1>) =>\n    emitError(\n      `An invalid signature has been provided for ${pk.format(Encoding.HEX)}`\n    );\n  export const Unimplemented = () => emitError('Unimplemented');\n  export const InvalidTransactionApproveRedirect = () =>\n    emitError(\n      \"The transaction must be either in the url or passed in through the component's state\"\n    );\n  export const InvalidPackedKey = () =>\n    emitError('The key in storage has an invalid format');\n  export const UnsupportedKeyCurve = (supportedCurve: string) =>\n    emitError(`Only ${supportedCurve} keys are supported`);\n  export const BlockedByCors = () => emitError('Not allowed by CORS policy');\n  export const UnintBafContract = () =>\n    emitError(\n      'BAF Contract is not initialized yet, please call setBafContract'\n    );\n  export const UnsupportedToken = (tokenName: string) =>\n    emitError(`Unsupported token ${tokenName}`);\n  export const UnsupportedChain = (chainName: string) =>\n    emitError(`Unsupported blockchain ${chainName}`);\n  export const MissingInitBalance = (chain: Chain) =>\n    emitError(\n      `An initial balance must be specified when initializing an account on ${chain}`\n    );\n  export const MissingKeyPair = () => {\n    emitError('A key path or key pair must be provided');\n  };\n  export const UnknownNetworkIdent = (identifier: string) =>\n    emitError(`Unknown network identifier ${identifier}`);\n  export const InvalidTrustWalletJSON = (err: any) =>\n    emitError(\n      `Received invalid info.json: ${err}. See \\`ChainInfo\\` in trust-wallet-assets/src/lib/index.ts for more information`\n    );\n  export const UnsupportedEncoding = (fmt: any) =>\n    emitError(`Encoding for format ${fmt} is unsupported`);\n}\n\n// A wrapper function to emit an error, this would allow us to do things such as easier Sentry logging\nfunction emitError(errStr: string) {\n  return new Error(errStr);\n}\n","export enum Env {\n  DEV,\n  TEST,\n  PROD,\n}\n","import { PublicKey, SecretKey, KeyPair, secp256k1, ed25519 } from './crypto';\nimport { Pair } from '@baf-wallet/utils';\nimport { Account as NearAccount } from 'near-api-js';\nimport {\n  GenericTxAction,\n  GenericTxParams,\n  GenericTxSupportedActions,\n} from './generic-tx';\n\nexport enum Chain {\n  NEAR = 'near',\n}\n// // TODO: have some intelligent way to get the rest\n// export enum Chain {\n//   ETH = 'ethereum',\n//   BTC = 'bitcoin',\n//   NEAR = 'near',\n//   SOLANA = 'solana',\n//   COSMOS = 'cosmos',\n//   CELO = 'celo',\n//   DOT = 'polkadot',\n//   FILECOIN = 'filecoin',\n//   HARMONEY = 'harmony',\n//   ALGORAND = 'algorand',\n//   AVALANCHE = 'avalanche',\n//   MATIC = 'matic',\n//   DOGE = 'doge',\n//   TERRA = 'terra',\n// }\n\n// Or the type with all the supported chain account types\nexport type ChainAccount = NearAccount;\n\nexport type Balance = string;\n\nexport interface ChainBalance {\n  chain: Chain;\n  balance: Balance;\n}\n\nexport type ExplorerLink = string;\n\n// ChainInterface but with the partial application already done via a closure somewhere\n// for instance, wrapChainInterface in @baf-wallet/multi-chain/switches\nexport interface WrappedChainInterface<\n  PK,\n  SK,\n  KP,\n  Inner,\n  Tx,\n  BuildTxParams,\n  SignedTx,\n  SignOpts,\n  SendOpts,\n  SendResult,\n  Account,\n  AccountLookupParams,\n  AccountCreateParams\n> {\n  rpc: RpcInterface<Tx, SignedTx, SendOpts, SendResult>;\n  tx: TxInterface<Tx, BuildTxParams, SignedTx, SignOpts, SendOpts, SendResult>;\n  accounts: AccountsInterface<\n    Account,\n    AccountLookupParams,\n    AccountCreateParams\n  >;\n  convert: Converter<PK, SK, KP>;\n  getInner: () => Inner;\n}\n\n// interface that every chain implementation is expected to implement\n// the 'innerSdk' HOF's are the way they are because most SDK's tend to be stateful (booooo)\n// which we need to be able to keep track of.\n// Since every SDK is probably going to be stateful, if at all, in a slightly different way,\n// we need to decouple the sdk's state from the actual functionality. If the 'Inner' type is expected\n// to contain all of the SDK's state, partial application affords us the flexibility we need to deal with\n// any kind of statefulness. Note that Inner can theoretically be void in the case that the underlying\n// SDK is stateless\nexport interface ChainInterface<\n  PK,\n  SK,\n  KP,\n  InitParams,\n  Inner,\n  Tx,\n  BuildTxParams,\n  SignedTx,\n  SignOpts,\n  SendOpts,\n  SendResult,\n  Account,\n  AccountLookupParams,\n  AccountCreateParams\n> {\n  rpc: (innerSdk: Inner) => RpcInterface<Tx, SignedTx, SendOpts, SendResult>;\n  tx: (\n    innerSdk: Inner\n  ) => TxInterface<Tx, BuildTxParams, SignedTx, SignOpts, SendOpts, SendResult>;\n  accounts: (\n    innerSdk: Inner\n  ) => AccountsInterface<Account, AccountLookupParams, AccountCreateParams>;\n  init: (params: InitParams) => Promise<Inner>;\n  convert: Converter<PK, SK, KP>;\n}\n\nexport interface AccountsInterface<Account, LookupParams, CreateParams> {\n  lookup: (params: LookupParams) => Promise<Account>;\n  create: (params: CreateParams) => Promise<Account>;\n  getGenericMasterAccount: () => GenericAccount;\n}\n\nexport interface GenericAccount {\n  getBalance: () => Promise<Balance>;\n}\n\n// bare minimum interface representing direct RPC methods to the chain\n// chains are expected to extend this with their own functions and/or values\nexport interface RpcInterface<Tx, SignedTx, SendOpts, SendResult> {\n  endpoint: (network?: string) => string;\n}\n\n// minimum interface representing all transaction-related operations\n// chains are expected to extend this with their own functions and/or values\nexport interface TxInterface<\n  Tx,\n  BuildTxParams,\n  SignedTx,\n  SignOpts,\n  SendOpts,\n  SendResult\n> {\n  build: (params: BuildTxParams) => Promise<Tx>;\n  sign: <Curve>(\n    tx: Tx,\n    keyPair: KeyPair<Curve>,\n    opts?: SignOpts\n  ) => Promise<SignedTx>;\n  send: (\n    tx: Tx | SignedTx,\n    opts?: SendOpts\n  ) => Promise<Pair<SendResult, ExplorerLink>>;\n  buildParamsFromGenericTx: (\n    params: GenericTxParams,\n    recipientPk: PublicKey<secp256k1>,\n    senderPkSecp: PublicKey<secp256k1>,\n    senderPkEd: PublicKey<ed25519>\n  ) => Promise<BuildTxParams>;\n  extractGenericActionsFromTx: (params: BuildTxParams) => GenericTxAction[];\n}\n\n// utility for going to/from key BAF Wallet unified types\n// each instance expected to be specific to a particular sdk so that\n// we aren't ever locked into using BAF types and reimplementing wheelsA\n// chains are expected to extend this with their own functions and/or values\nexport interface Converter<PK, SK, KP> {\n  skFromUnified: <Curve>(unifiedSk: SecretKey<Curve>) => SK;\n  skToUnified: <Curve>(sk: SK, curveMarker: Curve) => PublicKey<Curve>;\n  pkFromUnified: <Curve>(unifiedPk: PublicKey<Curve>) => PK;\n  pkToUnified: <Curve>(pk: PK, curveMarker: Curve) => SecretKey<Curve>;\n  keyPairFromUnified: <Curve>(unifiedKeyPair: KeyPair<Curve>) => KP;\n  keyPairToUnified: <Curve>(\n    unifiedKeyPair: KP,\n    curveMaker: Curve\n  ) => KeyPair<Curve>;\n  // add more methods for converting shit as necessary\n}\n\nexport type InferChainInterface<T> = T extends ChainInterface<\n  infer PK,\n  infer SK,\n  infer KP,\n  infer InitParams,\n  infer Inner,\n  infer Tx,\n  infer BuildTxParams,\n  infer SignedTx,\n  infer SignOpts,\n  infer SendOpts,\n  infer SendResult,\n  infer Account,\n  infer AccountLookupParams,\n  infer AccountCreateParams\n>\n  ? ChainInterface<\n      PK,\n      SK,\n      KP,\n      InitParams,\n      Inner,\n      Tx,\n      BuildTxParams,\n      SignedTx,\n      SignOpts,\n      SendOpts,\n      SendResult,\n      Account,\n      AccountLookupParams,\n      AccountCreateParams\n    >\n  : never;\nexport type InferWrappedChainInterface<T> = T extends WrappedChainInterface<\n  infer PK,\n  infer SK,\n  infer KP,\n  infer Inner,\n  infer Tx,\n  infer BuildTxParams,\n  infer SignedTx,\n  infer SignOpts,\n  infer SendOpts,\n  infer SendResult,\n  infer Account,\n  infer AccountLookupParams,\n  infer AccountCreateParams\n>\n  ? WrappedChainInterface<\n      PK,\n      SK,\n      KP,\n      Inner,\n      Tx,\n      BuildTxParams,\n      SignedTx,\n      SignOpts,\n      SendOpts,\n      SendResult,\n      Account,\n      AccountLookupParams,\n      AccountCreateParams\n    >\n  : never;\n\nexport type InferWrapChainInterface<T> = T extends ChainInterface<\n  infer PK,\n  infer SK,\n  infer KP,\n  infer _,\n  infer Inner,\n  infer Tx,\n  infer BuildTxParams,\n  infer SignedTx,\n  infer SignOpts,\n  infer SendOpts,\n  infer SendResult,\n  infer Account,\n  infer AccountLookupParams,\n  infer AccountCreateParams\n>\n  ? WrappedChainInterface<\n      PK,\n      SK,\n      KP,\n      Inner,\n      Tx,\n      BuildTxParams,\n      SignedTx,\n      SignOpts,\n      SendOpts,\n      SendResult,\n      Account,\n      AccountLookupParams,\n      AccountCreateParams\n    >\n  : never;\n\nexport type InferPK<T> = T extends ChainInterface<\n  infer PK,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? PK\n  : never;\nexport type InferSK<T> = T extends ChainInterface<\n  infer _,\n  infer SK,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? SK\n  : never;\nexport type InferKP<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer KP,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? KP\n  : never;\nexport type InferInitParams<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer InitParams,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? InitParams\n  : never;\nexport type InferInner<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer Inner,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? Inner\n  : never;\nexport type InferTx<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer Tx,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? Tx\n  : never;\nexport type InferTxBuildParams<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer TxBuildParams,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? TxBuildParams\n  : never;\n\nexport type InferSignedTx<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer SignedTx,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? SignedTx\n  : never;\nexport type InferSignOpts<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer SignOpts,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? SignOpts\n  : never;\nexport type InferSendOpts<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer SendOpts,\n  infer _,\n  infer _,\n  infer _,\n  infer _\n>\n  ? SendOpts\n  : never;\nexport type InferSendResult<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer SendResult,\n  infer _,\n  infer _,\n  infer _\n>\n  ? SendResult\n  : never;\nexport type InferAccount<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer Account,\n  infer _,\n  infer _\n>\n  ? Account\n  : never;\nexport type InferAccountLookupParams<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer AccountLookupParams,\n  infer _\n>\n  ? AccountLookupParams\n  : never;\nexport type InferAccountCreateParams<T> = T extends ChainInterface<\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer _,\n  infer AccountCreateParams\n>\n  ? AccountCreateParams\n  : never;\n","import { SupportedCurve, KeyPair } from './crypto';\n\nexport enum KeySourceMethod {\n  TORUS,\n  LOCAL_STORAGE,\n  // e.g. file, ledger, brain, etc, as they are implemented\n}\n\n// `KeyID` is a type that represents the type used to \"look up\" a key\n// in theory this could be the public key itself, but some source mechanisms\n// may offer different ways of doing so, for instance the key for use in localStorage.setItem\n// a file path, or a derived account number for a keypair stored on a ledger nano\nexport interface KeySource<KeyID> {\n  method: KeySourceMethod;\n  getKeyPair: <Curve>(\n    keyID: KeyID,\n    curveMarker: Curve\n  ) => Promise<KeyPair<Curve> | null>;\n\n  // these methods are for the off-chance that you don't know which curve a particular key-pair is on\n  // to use this, you'd typically call this and then case on the returned value\n  // for the vast majority of cases there will be only one curve used by a particular key source mechansim\n  // so these method aren't required.\n  // implementors are expected to implement either all of these methods or none of them.\n  getKeyCurve?: (keyID: KeyID) => Promise<SupportedCurve>;\n  getKeyPairUnknownCurve?: (keyID: KeyID) => Promise<KeyPair<SupportedCurve>>;\n}\n\n// then every keySource implementation should provide this function\nexport type KeySourceInitFn<KeyID, InitParams> = (\n  params: InitParams\n) => Promise<KeySource<KeyID>>;\n\nexport type KeySourceInferKeyID<T> = T extends KeySource<infer KeyID>\n  ? KeyID\n  : never;\nexport type KeySourceInitFnInferInitParams<T> = T extends KeySourceInitFn<\n  infer _,\n  infer InitParams\n>\n  ? InitParams\n  : never;\n","import { Buffer } from 'buffer';\n\nexport type secp256k1 = {\n  toString: () => 'secp256k1';\n};\n\nexport type ed25519 = {\n  toString: () => 'ed25519';\n};\n\nexport const ED25519_STR = 'ed25519';\nexport const SECP256K1_STR = 'secp256k1';\n\nexport const secp256k1Marker: secp256k1 = { toString: () => SECP256K1_STR };\nexport const ed25519Marker: ed25519 = { toString: () => ED25519_STR };\n\nexport type SupportedCurve = secp256k1 | ed25519;\n\nexport enum Encoding {\n  BS58,\n  HEX,\n  UTF8,\n}\n\nexport interface PublicKey<Curve> {\n  data: Buffer;\n  curve: Curve;\n  format: (fmt: Encoding) => string;\n}\n\nexport interface SecretKey<Curve> {\n  data: Buffer;\n  curve: Curve;\n  format: (fmt: Encoding) => string;\n}\n\nexport interface KeyPair<Curve> {\n  curve: Curve;\n  sk: SecretKey<Curve>;\n  pk: PublicKey<Curve>;\n}\n/**\n * A hex encoded string for the signature where sig.s is concated with sig.r\n */\nexport type RustEncodedSecpSig = Buffer;\n","import { PLATFORM } from './platforms';\n\nexport enum GenericTxSupportedActions {\n  TRANSFER = 'transfer',\n}\n\nexport interface GenericTxParams {\n  recipientUserId: string;\n  recipientUserIdReadable: string;\n  oauthProvider: PLATFORM;\n  actions: GenericTxAction[];\n}\n\ninterface GenericTxActionBase {\n  type: GenericTxSupportedActions;\n}\n\nexport interface GenericTxActionTransfer extends GenericTxActionBase {\n  type: GenericTxSupportedActions.TRANSFER;\n  // Amount is the quantity of the minimal sendable unit for a currency\n  amount: string;\n}\n\n// To be or'd with whatever other actions we use\nexport type GenericTxAction = GenericTxActionTransfer;\n","import {\n  ChainInterface,\n  ed25519,\n  Encoding,\n  InferWrapChainInterface,\n  KeyPair,\n  secp256k1,\n} from '@baf-wallet/interfaces';\nimport {\n  Account,\n  connect,\n  ConnectConfig,\n  KeyPair as NearKeyPair,\n  Near,\n  providers,\n  transactions,\n  utils as NearUtils,\n} from 'near-api-js';\n\nimport { NearBuildTxParams, NearSignTxOpts, nearTx } from './tx';\nimport { nearRpc, NearSendOpts, NearSendResult } from './rpc';\nimport {\n  NearAccountID,\n  nearAccounts,\n  NearCreateAccountParams,\n} from './accounts';\nimport { nearConverter } from './convert';\nimport { NearNetworkID } from './utils';\nimport { InMemoryKeyStore } from 'near-api-js/lib/key_stores';\nimport { KeyPairEd25519 as NearKeyPairEd25519 } from 'near-api-js/lib/utils';\nimport { BafError } from '@baf-wallet/errors';\n\nexport type { NearAccountID, NearCreateAccountParams } from './accounts';\nexport type {\n  NearTransaction,\n  NearBuildTxParams,\n  NearAction,\n  NearSupportedActionTypes,\n} from './tx';\nexport type WrappedNearChainInterface = InferWrapChainInterface<NearChainInterface>;\n\nexport type NearChainInterface = ChainInterface<\n  NearUtils.PublicKey,\n  Buffer,\n  NearKeyPair,\n  NearInitParams,\n  NearState,\n  transactions.Transaction,\n  NearBuildTxParams,\n  transactions.SignedTransaction,\n  NearSignTxOpts,\n  NearSendOpts,\n  NearSendResult,\n  Account,\n  NearAccountID,\n  NearCreateAccountParams\n>;\n\nexport interface NearState {\n  near: Near;\n  rpcProvider: providers.JsonRpcProvider;\n  networkID: NearNetworkID;\n  nearMasterAccount: Account;\n}\n\nexport const nearChainInterface: NearChainInterface = {\n  accounts: nearAccounts,\n  tx: nearTx,\n  convert: nearConverter,\n  rpc: nearRpc,\n  init,\n};\n\nexport interface NearInitParams {\n  networkID: NearNetworkID;\n  masterAccountID: NearAccountID;\n  keyPath?: string;\n  keyPair?: KeyPair<ed25519>;\n}\n\nasync function init({\n  networkID,\n  masterAccountID,\n  keyPath,\n  keyPair,\n}: NearInitParams): Promise<NearState> {\n  const nodeUrl = `https://rpc.${networkID}.near.org`;\n  const connectConfig = {\n    networkId: networkID,\n    nodeUrl,\n    helperUrl: `https://helper.${networkID}.near.org`,\n    masterAccount: masterAccountID,\n    keyPath,\n  } as ConnectConfig;\n  if (keyPair) {\n    const keyStore = new InMemoryKeyStore();\n    const nearKp = new NearKeyPairEd25519(keyPair.sk.format(Encoding.BS58));\n    keyStore.setKey(networkID, masterAccountID, nearKp);\n    connectConfig.deps = {\n      keyStore: keyStore,\n    };\n    connectConfig.keyStore = keyStore;\n  } else if (keyPath) {\n    const keyStore = new InMemoryKeyStore();\n    connectConfig.deps = {\n      keyStore: keyStore,\n    };\n  } else {\n    throw BafError.MissingKeyPair();\n  }\n\n  const near = await connect(connectConfig);\n\n  return {\n    near,\n    networkID,\n    rpcProvider: new providers.JsonRpcProvider(nodeUrl),\n    nearMasterAccount: await near.account(masterAccountID),\n  };\n}\n","export * from './hash';\nexport * from './index';\nexport * from './keys';\nexport * from './sign';\n","export * from './keys';\nexport * from './hash';\nexport * from './sign';\n","export * from './bytes';\nexport * from './conversions';\nexport * from './types';\nexport * from './user-verifier';\nexport * from './serialize';\n","import {\n  Converter,\n  SecretKey,\n  PublicKey,\n  Encoding,\n  KeyPair,\n} from '@baf-wallet/interfaces';\nimport { formatBytes } from './bytes';\nimport { Pair } from './types';\nimport { Buffer } from 'buffer';\n\nexport const bufferConverter: Converter<\n  Buffer,\n  Buffer,\n  Pair<Buffer, Buffer>\n> = {\n  skFromUnified,\n  skToUnified,\n  pkFromUnified,\n  pkToUnified,\n  keyPairFromUnified,\n  keyPairToUnified,\n};\n\nfunction skFromUnified<Curve>(unifiedSk: SecretKey<Curve>): Buffer {\n  return Buffer.from(unifiedSk.data);\n}\n\nfunction skToUnified<Curve>(sk: Buffer, curveMarker: Curve): SecretKey<Curve> {\n  const data = Buffer.from(sk);\n  return {\n    data,\n    curve: curveMarker,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n\nfunction pkFromUnified<Curve>(bafPk: PublicKey<Curve>): Buffer {\n  return Buffer.from(bafPk.data);\n}\n\nfunction pkToUnified<Curve>(pk: Buffer, curveMarker: Curve): PublicKey<Curve> {\n  const data = Buffer.from(pk);\n  return {\n    data,\n    curve: curveMarker,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n\nfunction keyPairFromUnified<Curve>(\n  unifiedKeyPair: KeyPair<Curve>\n): Pair<Buffer, Buffer> {\n  const { pk, sk } = unifiedKeyPair;\n  return {\n    fst: Buffer.from(sk.data),\n    snd: Buffer.from(pk.data),\n  };\n}\n\nfunction keyPairToUnified<Curve>(\n  keyPair: Pair<Buffer, Buffer>,\n  curveMarker: Curve\n): KeyPair<Curve> {\n  const skBytes = keyPair.fst;\n  const pkBytes = keyPair.snd;\n  return {\n    curve: curveMarker,\n    sk: skToUnified(skBytes, curveMarker),\n    pk: pkToUnified(pkBytes, curveMarker),\n  };\n}\n","export type Pair<T, U> = {\n  fst: T;\n  snd: U;\n};\n\nexport const getEnumValues = (enumObj: any) =>\n  Object.keys(enumObj).map((key) => enumObj[key]);\n","export function createUserVerifyMessage(userId: string, nonce: string) {\n  return `${userId}:${nonce}`;\n}\n","export const serializeData = (data: any) => JSON.stringify(data);\n// TODO: add type checking. See https://github.com/bafnetwork/baf-wallet-v2/issues/36\nexport const deserializeData = <T>(uriEncoded: string) =>\n  JSON.parse(uriEncoded) as T;\n","import { Account, Contract, Near } from 'near-api-js';\nimport { BafError } from '@baf-wallet/errors';\nimport ContractConfig from '../../config.json';\nimport { ec as EC } from 'elliptic';\nimport {\n  PublicKey,\n  RustEncodedSecpSig,\n  secp256k1,\n} from '@baf-wallet/interfaces';\nimport { NearAccountID } from '@baf-wallet/near';\nimport { pkToArray, pkToString } from '@baf-wallet/utils';\n\ninterface BafContract {\n  getAccountId: (pk: PublicKey<secp256k1>) => Promise<NearAccountID | null>;\n  getAccountNonce: (secp_pk: PublicKey<secp256k1>) => Promise<string>;\n  setAccountInfo: (\n    secp_pk: PublicKey<secp256k1>,\n    user_id: string,\n    secp_sig_s: RustEncodedSecpSig,\n    new_account_id: NearAccountID\n  ) => Promise<void>;\n  deleteAccountInfo: (\n    secp_pk: PublicKey<secp256k1>,\n    user_id: string,\n    secp_sig_s: RustEncodedSecpSig\n  ) => Promise<void>;\n}\n\nlet bafContract: BafContract;\n\nexport async function setBafContract(account: Account): Promise<BafContract> {\n  bafContract = await buildBafContract(account);\n  return bafContract;\n}\n\nexport function getBafContract(): BafContract {\n  if (bafContract) return bafContract;\n  throw BafError.UnintBafContract();\n}\n\nasync function buildBafContract(account: Account): Promise<BafContract> {\n  const contract = new Contract(account, ContractConfig.contractName, {\n    viewMethods: ['get_account_id', 'get_account_nonce'],\n    changeMethods: ['set_account_info', 'delete_account_info'],\n  });\n  return {\n    getAccountId: async (pk) => {\n      const ret = await (contract as any).get_account_id({\n        secp_pk: pkToArray(pk),\n      });\n      if (!ret || ret === '') return null;\n      else return ret as NearAccountID;\n    },\n    getAccountNonce: (pk) =>\n      (contract as any).get_account_nonce({\n        secp_pk: pkToArray(pk),\n      }) as Promise<string>,\n    setAccountInfo: (pk, user_id, secp_sig_s, new_account_id) =>\n      (contract as any).set_account_info({\n        user_id,\n        secp_pk: pkToArray(pk),\n        secp_sig_s: [...secp_sig_s],\n        new_account_id,\n      }),\n    deleteAccountInfo: (pk, user_id, secp_sig_s) =>\n      (contract as any).delete_account_info({\n        user_id,\n        secp_pk: pkToArray(pk),\n        secp_sig_s: [...secp_sig_s],\n      }),\n  };\n}\n\nexport function encodeSecpSigBafContract(sig: EC.Signature): Buffer {\n  return Buffer.from(\n    `${sig.r.toString('hex', 64)}${sig.s.toString('hex', 64)}`,\n    'hex'\n  );\n}\n","export const bafContractConstants = {\n  // :)\n  beneficiaryId: 'lev.near',\n};\n","import { BafError } from '@baf-wallet/errors';\nimport { Chain } from '@baf-wallet/interfaces';\nimport { nearToYoctoNear } from '@baf-wallet/near';\n\nexport function formatAmountToIndivisibleUnit(\n  amount: number,\n  chain: Chain\n): string {\n  switch (chain) {\n    case Chain.NEAR:\n      return nearToYoctoNear(amount);\n    default:\n      throw BafError.UnsupportedChain(chain);\n  }\n}\n","import { Chain, GenericTxParams } from '@baf-wallet/interfaces';\nimport { deserializeData, serializeData } from '@baf-wallet/utils';\n\n// TODO: interface check\nexport const deserializeTxParams = (paramsEncoded: string): GenericTxParams => {\n  return deserializeData(decodeURIComponent(paramsEncoded)) as GenericTxParams;\n};\n\nexport const createApproveRedirectURL = (\n  chain: Chain,\n  baseURL: string,\n  opts: GenericTxParams\n) => {\n  return encodeURI(\n    `${baseURL}/#/approve-redirect/${chain.toString()}/${encodeURIComponent(\n      serializeData(opts)\n    )}`\n  );\n};\n","module.exports = require(\"dotenv\");","import { Client as DiscordClient, Collection } from 'discord.js';\nimport { connect } from 'near-api-js';\nimport { InMemoryKeyStore } from 'near-api-js/lib/key_stores';\nimport 'reflect-metadata';\nimport { Service } from 'typedi';\nimport { Command } from './Command';\nimport { settings as configuration } from './config/config';\nimport getConfig from './getConfig';\nimport { ActionManager } from './managers/ActionManager';\nimport { BotClient, BotSettings } from './types';\n\n@Service()\nexport class Client extends DiscordClient implements BotClient {\n  public settings: BotSettings;\n\n  constructor(private readonly actionManager: ActionManager) {\n    super(configuration.clientOptions ?? {});\n    this.settings = configuration;\n    this.initialize();\n  }\n\n  private initialize(): void {\n    try {\n      this.actionManager.initializeCommands(this);\n      this.actionManager.initializeEvents(this);\n    } catch (e) {\n      console.error(`Could not initialize bot: ${e as string}`);\n    }\n  }\n\n  public get commands(): Collection<string, Command> {\n    return this.actionManager.commands;\n  }\n}\n","import Ping from './Ping';\nimport Send from './Send';\nexport default [Ping, Send];\n","import { Message } from 'discord.js';\nimport { Command } from '../Command';\nimport { BotClient } from '../types';\n\nexport default class Ping extends Command {\n  constructor(client: BotClient) {\n    super(client, {\n      name: 'ping',\n      description: 'Pings the bot.',\n      category: 'Information',\n      usage: client.settings.prefix.concat('ping'),\n      cooldown: 1000,\n      requiredPermissions: ['SEND_MESSAGES'],\n    });\n  }\n\n  public async run(message: Message): Promise<void> {\n    await super.respond(message.channel, 'Pong!');\n  }\n}\n","import { Message } from 'discord.js';\nimport { Command } from '../Command';\nimport { BotClient } from '../types';\nimport { formatAmountToIndivisibleUnit } from '@baf-wallet/multi-chain';\nimport { createApproveRedirectURL } from '@baf-wallet/redirect-generator';\nimport { environment } from '../environments/environment';\nimport {\n  Chain,\n  GenericTxParams,\n  GenericTxSupportedActions,\n} from '@baf-wallet/interfaces';\n\nexport default class SendMoney extends Command {\n  constructor(protected client: BotClient) {\n    super(client, {\n      name: 'sendMoney',\n      description: 'sends NEAR or NEP-5 tokens on NEAR testnet',\n      category: 'Utility',\n      usage: `${client.settings.prefix}send [amount in yoctoNear] [asset (optional, defaults to 'NEAR')]  [recipient]`,\n      cooldown: 1000,\n      requiredPermissions: [],\n    });\n  }\n\n  public async run(message: Message): Promise<void> {\n    const content = message.content;\n    if (!content) {\n      throw Error('message content is empty!');\n    }\n\n    const params = content.split(' ');\n    if (params.length < 3 || params.length > 4) {\n      await super.respond(\n        message.channel,\n        `expected 2 parameters, got ${params.length - 1}.\\n\\`usage: ${\n          this.conf.usage\n        }\\``\n      );\n      return;\n    }\n\n    let amount = parseInt(params[1]);\n    if (Number.isNaN(amount)) {\n      await super.respond(\n        message.channel,\n        '❌ invalid amount ❌: amount must be a number!'\n      );\n      return;\n    }\n    let asset = params[2];\n    let recipient: string;\n    if (params.length === 4) {\n      asset = params[2];\n      recipient = params[3];\n    } else {\n      recipient = params[2];\n    }\n\n    // Recipient should look like <@86890631690977280>\n    let recipientParsed: string;\n    try {\n      recipientParsed = recipient.split('<@!')[1].split('>')[0];\n    } catch (e) {\n      await super.respond(\n        message.channel,\n        '❌ invalid user ❌: the user must be tagged!'\n      );\n      return;\n    }\n\n    const recipientUser = this.client.users.resolve(recipientParsed);\n    const recipientUserReadable = `${recipientUser.username}#${recipientUser.discriminator}`;\n\n    try {\n      const tx: GenericTxParams = {\n        recipientUserId: recipientParsed,\n        recipientUserIdReadable: recipientUserReadable,\n        actions: [\n          {\n            type: GenericTxSupportedActions.TRANSFER,\n            amount: formatAmountToIndivisibleUnit(amount, Chain.NEAR),\n          },\n        ],\n        oauthProvider: 'discord',\n      };\n      const link = createApproveRedirectURL(\n        Chain.NEAR,\n        environment.BASE_WALLET_URL,\n        tx\n      );\n\n      await message.author.send(link);\n    } catch (err) {\n      console.error(err);\n      await super.respond(\n        message.channel,\n        `🚧 an error has occurred 🚧:\n        \\n\\`${err}\\`\n        \\nPlease create an issue at https://github.com/bafnetwork/baf-wallet-v2/issues and HODL tight until we fix it.`\n      );\n      return;\n    }\n  }\n}\n","export * from './lib';\n","import {\n  KeyPair,\n  TxInterface,\n  PublicKey,\n  secp256k1,\n  ed25519,\n  ExplorerLink,\n  GenericTxParams,\n  GenericTxSupportedActions,\n  GenericTxAction,\n  GenericTxActionTransfer,\n} from '@baf-wallet/interfaces';\nimport { Pair, getEnumValues } from '@baf-wallet/utils';\nimport { sha256 } from '@baf-wallet/crypto';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport {\n  KeyPair as NearKeyPair,\n  keyStores,\n  providers,\n  transactions,\n  utils,\n} from 'near-api-js';\n\nimport { NearState } from './near';\nimport { NearSendOpts, NearSendResult } from './rpc';\nimport { NearAccountID } from './accounts';\nimport { nearConverter } from './convert';\nimport {\n  Action as NearNativeAction,\n  SignedTransaction,\n  Transaction,\n  signTransaction,\n} from 'near-api-js/lib/transaction';\nimport { getBafContract } from '@baf-wallet/baf-contract';\n\nexport type NearTxInterface = TxInterface<\n  Transaction,\n  NearBuildTxParams,\n  SignedTransaction,\n  NearSignTxOpts,\n  NearSendOpts,\n  NearSendResult\n>;\nexport type NearSupportedActionTypes = GenericTxSupportedActions;\nexport type NearTransaction = Transaction;\ninterface NearActionParam {\n  // used to type check the parameter input\n  discriminator: NearSupportedActionTypes;\n}\nexport interface NearTransferParam extends NearActionParam {\n  // a string number value in Yocto\n  amount: string;\n}\nexport type NearAction = GenericTxAction;\nexport interface NearBuildTxParams {\n  actions: NearAction[];\n  senderPk: PublicKey<ed25519>;\n  senderAccountID: NearAccountID;\n  recipientAccountID: NearAccountID;\n}\nexport interface NearSignTxOpts {}\n\nexport function nearTx(innerSdk: NearState): NearTxInterface {\n  return {\n    build: buildNearTx(innerSdk),\n    sign: signNearTx,\n    send: sendNearTx(innerSdk),\n    buildParamsFromGenericTx: buildParamsFromGenericTx(innerSdk),\n    extractGenericActionsFromTx,\n  };\n}\n\nfunction buildNativeAction(action: NearAction): NearNativeAction {\n  switch (action.type) {\n    case GenericTxSupportedActions.TRANSFER:\n      return transactions.transfer(\n        new BN((action as GenericTxActionTransfer).amount, 10)\n      );\n    default:\n      throw `Action of type ${action.type} is unsupported`;\n  }\n}\n\nexport const extractGenericActionsFromTx = (\n  txParams: NearBuildTxParams\n): GenericTxAction[] => {\n  return txParams.actions;\n};\n\nexport const buildParamsFromGenericTx = (innerSdk: NearState) => async (\n  txParams: GenericTxParams,\n  recipientPk: PublicKey<secp256k1>,\n  _senderPk: PublicKey<secp256k1>,\n  senderPk: PublicKey<ed25519>\n): Promise<NearBuildTxParams> => {\n  const recipientAccountID = await getBafContract().getAccountId(recipientPk);\n  const nearTransferParams: NearBuildTxParams = {\n    actions: txParams.actions,\n    senderPk: senderPk,\n    senderAccountID: innerSdk.nearMasterAccount.accountId,\n    recipientAccountID,\n  };\n  return nearTransferParams;\n};\n\nexport const buildNearTx = (innerSdk: NearState) => async ({\n  actions,\n  senderPk,\n  senderAccountID,\n  recipientAccountID,\n}: NearBuildTxParams): Promise<Transaction> => {\n  const nearSenderPk = nearConverter.pkFromUnified(senderPk);\n  const accessKey = await innerSdk.rpcProvider.query(\n    `access_key/${senderAccountID}/${nearSenderPk.toString()}`,\n    ''\n  );\n\n  const nonce = ++accessKey.nonce;\n  const recentBlockHash = utils.serialize.base_decode(accessKey.block_hash);\n  const nativeActions = actions.map(buildNativeAction);\n\n  return transactions.createTransaction(\n    senderAccountID,\n    nearSenderPk,\n    recipientAccountID,\n    nonce,\n    nativeActions,\n    recentBlockHash\n  );\n};\n\nexport async function signNearTx<Curve>(\n  tx: transactions.Transaction,\n  keyPair: KeyPair<Curve>,\n  _opts?: NearSignTxOpts\n): Promise<transactions.SignedTransaction> {\n  const nearKeyPair = nearConverter.keyPairFromUnified(keyPair);\n  const serializedTx = utils.serialize.serialize(transactions.SCHEMA, tx);\n  const serializedTxHash = new Uint8Array(sha256(Buffer.from(serializedTx)));\n  const signature = nearKeyPair.sign(serializedTxHash);\n  // const [_, signedTx] = await signTransaction(tx, )\n  return new transactions.SignedTransaction({\n    transaction: tx,\n    signature: new transactions.Signature({\n      keyType: tx.publicKey.keyType,\n      data: signature.signature,\n    }),\n  });\n}\n\nexport const sendNearTx = (innerSdk: NearState) => async (\n  tx: SignedTransaction\n): Promise<Pair<NearSendResult, ExplorerLink>> => {\n  const serialized = tx.encode();\n  const result = await innerSdk.rpcProvider.sendJsonRpc('broadcast_tx_commit', [\n    Buffer.from(serialized).toString('base64'),\n  ]);\n\n  const explorerLink = `https://explorer.${innerSdk.networkID}.near.org/transactions/${result.transaction.hash}`;\n  return {\n    fst: result,\n    snd: explorerLink,\n  };\n};\n","export * from './lib/crypto';\n","module.exports = require(\"js-sha3\");","module.exports = require(\"js-sha256\");","module.exports = require(\"bn.js\");","import { RpcInterface } from '@baf-wallet/interfaces';\nimport { transactions } from 'near-api-js';\nimport { NearNetworkID, stringToNetworkID } from './utils';\nimport { NearState } from './near';\n\nexport type NearRpcInterface = RpcInterface<\n  transactions.Transaction,\n  transactions.SignedTransaction,\n  NearSendOpts,\n  NearSendResult\n>;\n\n// TODO: go spelunking in near's jsonRpcProvider and see what options it takes\n// and see what kind of stuff it actually returns so we can do better than 'any'\nexport interface NearSendOpts {}\nexport type NearSendResult = any;\n\n// * add more RPC methods as they are needed\n\nexport function nearRpc(_innerSdk: NearState): NearRpcInterface {\n  return {\n    endpoint: getNodeUrl,\n  };\n}\n\nexport function getNodeUrl(network?: string): string {\n  const networkID: NearNetworkID = stringToNetworkID(network ?? 'mainnet');\n  return `https://rpc.${networkID}.near.org`;\n}\n","import {\n  AccountsInterface,\n  Balance,\n  Chain,\n  ed25519,\n  secp256k1,\n} from '@baf-wallet/interfaces';\nimport { Account as NearAccount } from 'near-api-js';\nimport {\n  AccountCreator,\n  UrlAccountCreator,\n  LocalAccountCreator,\n} from 'near-api-js/lib/account_creator';\nimport BN from 'bn.js';\n\nimport { PublicKey } from '@baf-wallet/interfaces';\nimport { NearState } from './near';\nimport { nearConverter } from './convert';\nimport { BafError } from '@baf-wallet/errors';\n\nexport type NearAccountID = string;\n\nexport function nearAccounts(\n  nearState: NearState\n): AccountsInterface<NearAccount, NearAccountID, NearCreateAccountParams> {\n  const { near } = nearState;\n  return {\n    lookup: async (accountID: NearAccountID): Promise<NearAccount> =>\n      await near.account(accountID),\n\n    getGenericMasterAccount: () => {\n      return {\n        getBalance: async () =>\n          (await nearState.nearMasterAccount.getAccountBalance())\n            .total as Balance,\n      };\n    },\n    create: async ({\n      accountID,\n      newAccountPk,\n      initialBalance,\n      method = 'helper',\n    }: NearCreateAccountParams): Promise<NearAccount> => {\n      if (method === 'local' && !initialBalance) {\n        throw BafError.MissingInitBalance(Chain.NEAR);\n      }\n      const masterAccount = await near.account(near.config.masterAccount);\n      const accountCreator: AccountCreator =\n        method === 'helper'\n          ? new UrlAccountCreator(near.connection, near.config.helperUrl)\n          : new LocalAccountCreator(masterAccount, initialBalance);\n\n      await accountCreator.createAccount(\n        accountID,\n        nearConverter.pkFromUnified(newAccountPk)\n      );\n      return await near.account(accountID);\n    },\n  };\n}\n\nexport interface NearCreateAccountParams {\n  accountID: NearAccountID;\n  newAccountPk: PublicKey<ed25519 | secp256k1>;\n  initialBalance?: BN;\n  method?: 'helper' | 'local';\n}\n","module.exports = require(\"near-api-js/lib/utils\");","export * from './lib/redirect-generator';\n","import Message from './Message';\nimport Ready from './Ready';\n\nexport default [Message, Ready];\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Message as DiscordMessage } from 'discord.js';\nimport { BotClient, BotEvent } from '../types';\n\nexport default class Message implements BotEvent {\n  constructor(private readonly client: BotClient) {}\n\n  name(): string {\n    return 'message';\n  }\n\n  public async run(args?: any): Promise<void> {\n    if (!(args instanceof DiscordMessage)) {\n      // TODO use winston\n      console.error('invalid args for Message event');\n      return args;\n    }\n\n    const message: DiscordMessage = args;\n\n    if (\n      message.author.bot ||\n      !message.content.startsWith(this.client.settings.prefix)\n    )\n      return;\n\n    const argus = message.content.split(/\\s+/g);\n    const command = argus.shift()!.slice(this.client.settings.prefix.length);\n    const cmd = this.client.commands.get(command);\n\n    if (cmd === undefined || !(await cmd.canRun(message.author, message)))\n      return;\n    await cmd.run(message, argus);\n\n    if (message.guild !== null) cmd.setCooldown(message.author, message.guild);\n  }\n}\n","import { BotClient, BotEvent } from '../types';\n\nexport default class Ready implements BotEvent {\n  private readonly client: BotClient;\n  constructor(client: BotClient) {\n    this.client = client;\n  }\n\n  name(): string {\n    return 'ready';\n  }\n\n  public async run(): Promise<void> {\n    if (this.client.user !== null) {\n      console.log(`${this.client.user.username} is ready!`);\n      await this.client.user.setPresence(this.client.settings.presence);\n    }\n  }\n}\n","import 'reflect-metadata';\nimport { environment } from './environments/environment';\nimport { Container } from 'typedi';\nimport { Client } from './Client';\n\n// Initialize the Client using the IoC.\nconst client = Container.get<Client>(Client);\n\nclient\n  .login(environment.DISCORD_TOKEN)\n  .then(() => {\n    console.log('tokenbot happily hodling along');\n  })\n  .catch((e) => console.error(e));\n"],"sourceRoot":""}